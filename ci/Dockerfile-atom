FROM almalinux:9.2-minimal

LABEL maintainer="appthreat" \
      org.opencontainers.image.authors="Team AppThreat <cloud@appthreat.com>" \
      org.opencontainers.image.source="https://github.com/appthreat/cpggen" \
      org.opencontainers.image.url="https://github.com/appthreat/cpggen" \
      org.opencontainers.image.version="1.7.2" \
      org.opencontainers.image.vendor="AppThreat" \
      org.opencontainers.image.licenses="Apache-2.0" \
      org.opencontainers.image.title="cpggen" \
      org.opencontainers.image.description="Generate atoms for multiple languages" \
      org.opencontainers.docker.cmd="docker run --rm -it -v /tmp:/tmp -v $(pwd):/app:rw -w /app -t ghcr.io/appthreat/atomgen"

ARG JAVA_VERSION=22.3.r19-grl

ENV JAVA_HOME="/opt/java/${JAVA_VERSION}" \
    JAVA_VERSION=$JAVA_VERSION \
    PYTHONUNBUFFERED=1 \
    PYTHONIOENCODING="utf-8"
ENV PATH=${PATH}:/usr/local/bin:/root/.local/bin:${JAVA_HOME}/bin:

COPY . /usr/local/src/

RUN echo -e "[nodejs]\nname=nodejs\nstream=20\nprofiles=\nstate=enabled\n" > /etc/dnf/modules.d/nodejs.module \
    && microdnf install -y gcc gcc-c++ git-core python3.11 python3.11-devel python3.11-pip which tar zip unzip sudo \
        findutils nodejs \
    && alternatives --install /usr/bin/python3 python /usr/bin/python3.11 1 \
    && python3 --version \
    && python3 -m pip install --upgrade pip \
    && curl -s "https://get.sdkman.io" | bash \
    && source "$HOME/.sdkman/bin/sdkman-init.sh" \
    && echo -e "sdkman_auto_answer=true\nsdkman_selfupdate_feature=false\nsdkman_auto_env=true" >> $HOME/.sdkman/etc/config \
    && sdk install java $JAVA_VERSION \
    && sdk offline enable \
    && mv /root/.sdkman/candidates/* /opt/ \
    && rm -rf /root/.sdkman \
    && useradd -ms /bin/bash atom \
    && curl -L https://github.com/joernio/astgen/releases/latest/download/astgen-linux -o /usr/local/bin/astgen \
    && chmod +x /usr/local/bin/astgen \
    && npm install -g @cyclonedx/cdxgen @appthreat/atom --omit=optional \
    && python3 -m pip install --no-cache-dir poetry \
    && poetry config virtualenvs.create false \
    && cd /usr/local/src/ && poetry install --no-cache --without dev \
    && chmod a-w -R /opt \
    && microdnf remove -y gcc gcc-c++ \
    && rm -rf /var/cache/yum \
    && microdnf clean all

WORKDIR /app

ENTRYPOINT [ "atomgen" ]
