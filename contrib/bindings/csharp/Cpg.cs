// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cpg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace io.shiftleft.proto.cpg {

  /// <summary>Holder for reflection information generated from cpg.proto</summary>
  public static partial class CpgReflection {

    #region Descriptor
    /// <summary>File descriptor for cpg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CpgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgljcGcucHJvdG8SA2NwZyKuAwoNUHJvcGVydHlWYWx1ZRIWCgxzdHJpbmdf",
            "dmFsdWUYASABKAlIABIUCgpib29sX3ZhbHVlGAIgASgISAASEwoJaW50X3Zh",
            "bHVlGAMgASgFSAASFAoKbG9uZ192YWx1ZRgEIAEoA0gAEhUKC2Zsb2F0X3Zh",
            "bHVlGAUgASgCSAASFgoMZG91YmxlX3ZhbHVlGAYgASgBSAASJgoLc3RyaW5n",
            "X2xpc3QYByABKAsyDy5jcGcuU3RyaW5nTGlzdEgAEiIKCWJvb2xfbGlzdBgI",
            "IAEoCzINLmNwZy5Cb29sTGlzdEgAEiAKCGludF9saXN0GAkgASgLMgwuY3Bn",
            "LkludExpc3RIABIiCglsb25nX2xpc3QYCiABKAsyDS5jcGcuTG9uZ0xpc3RI",
            "ABIkCgpmbG9hdF9saXN0GAsgASgLMg4uY3BnLkZsb2F0TGlzdEgAEiYKC2Rv",
            "dWJsZV9saXN0GAwgASgLMg8uY3BnLkRvdWJsZUxpc3RIABIsCg5jb250YWlu",
            "ZWRfcmVmcxgNIAEoCzISLmNwZy5Db250YWluZWRSZWZzSABCBwoFdmFsdWUi",
            "MQoNQ29udGFpbmVkUmVmcxISCgpsb2NhbF9uYW1lGAEgASgJEgwKBHJlZnMY",
            "AiADKAMiHAoKU3RyaW5nTGlzdBIOCgZ2YWx1ZXMYASADKAkiGgoIQm9vbExp",
            "c3QSDgoGdmFsdWVzGAEgAygIIhkKB0ludExpc3QSDgoGdmFsdWVzGAEgAygF",
            "IhoKCExvbmdMaXN0Eg4KBnZhbHVlcxgBIAMoAyIbCglGbG9hdExpc3QSDgoG",
            "dmFsdWVzGAEgAygCIhwKCkRvdWJsZUxpc3QSDgoGdmFsdWVzGAEgAygBIpQN",
            "CglDcGdTdHJ1Y3QSIQoEbm9kZRgBIAMoCzITLmNwZy5DcGdTdHJ1Y3QuTm9k",
            "ZRIhCgRlZGdlGAIgAygLMhMuY3BnLkNwZ1N0cnVjdC5FZGdlGsgHCgROb2Rl",
            "EgsKA2tleRgBIAEoAxIqCgR0eXBlGAIgASgOMhwuY3BnLkNwZ1N0cnVjdC5O",
            "b2RlLk5vZGVUeXBlEi4KCHByb3BlcnR5GAMgAygLMhwuY3BnLkNwZ1N0cnVj",
            "dC5Ob2RlLlByb3BlcnR5GlIKCFByb3BlcnR5EiMKBG5hbWUYASABKA4yFS5j",
            "cGcuTm9kZVByb3BlcnR5TmFtZRIhCgV2YWx1ZRgCIAEoCzISLmNwZy5Qcm9w",
            "ZXJ0eVZhbHVlIoIGCghOb2RlVHlwZRIVChFVTktOT1dOX05PREVfVFlQRRAA",
            "EgoKBk1FVEhPRBABEhEKDU1FVEhPRF9SRVRVUk4QAxIOCgpBTk5PVEFUSU9O",
            "EAUSHwobQU5OT1RBVElPTl9QQVJBTUVURVJfQVNTSUdOEAYSGAoUQU5OT1RB",
            "VElPTl9QQVJBTUVURVIQBxILCgdMSVRFUkFMEAgSCgoGTUVNQkVSEAkSFQoR",
            "QVJSQVlfSU5JVElBTElaRVIQDhIICgRDQUxMEA8SCQoFTE9DQUwQFxIHCgNU",
            "QUcQGBIMCghMT0NBVElPThAZEg4KCklERU5USUZJRVIQGxIKCgZSRVRVUk4Q",
            "HhIJCgVCTE9DSxAfEhgKFE1FVEhPRF9QQVJBTUVURVJfT1VUECESFwoTTUVU",
            "SE9EX1BBUkFNRVRFUl9JThAiEg4KCkRFUEVOREVOQ1kQIxIICgRGSUxFECYS",
            "DQoJTUVUQV9EQVRBECcSDQoJTkFNRVNQQUNFECgSEwoPTkFNRVNQQUNFX0JM",
            "T0NLECkSCwoHVU5LTk9XThAsEggKBFRZUEUQLRINCglUWVBFX0RFQ0wQLhIS",
            "Cg5UWVBFX1BBUkFNRVRFUhAvEhEKDVRZUEVfQVJHVU1FTlQQMBIWChJBTk5P",
            "VEFUSU9OX0xJVEVSQUwQMRIPCgtDT05GSUdfRklMRRAyEgwKB0JJTkRJTkcQ",
            "kgESEgoNVEFHX05PREVfUEFJUhDQARIMCgdGSU5ESU5HENYBEhMKDktFWV9W",
            "QUxVRV9QQUlSENkBEg0KCE1PRElGSUVSEKwCEg8KCk1FVEhPRF9SRUYQzQIS",
            "FAoPQ0xPU1VSRV9CSU5ESU5HEM4CEg0KCFRZUEVfUkVGEM8CEhYKEUNPTlRS",
            "T0xfU1RSVUNUVVJFENMCEhAKC0pVTVBfVEFSR0VUENQCEg8KCkpVTVBfTEFC",
            "RUwQ1QISEQoMVEVNUExBVEVfRE9NEKEDEgwKB0NPTU1FTlQQ/wMSFgoQRklF",
            "TERfSURFTlRJRklFUhC5kXoa9QQKBEVkZ2USCwoDc3JjGAEgASgDEgsKA2Rz",
            "dBgCIAEoAxIqCgR0eXBlGAMgASgOMhwuY3BnLkNwZ1N0cnVjdC5FZGdlLkVk",
            "Z2VUeXBlEi4KCHByb3BlcnR5GAQgAygLMhwuY3BnLkNwZ1N0cnVjdC5FZGdl",
            "LlByb3BlcnR5GlIKCFByb3BlcnR5EiMKBG5hbWUYASABKA4yFS5jcGcuRWRn",
            "ZVByb3BlcnR5TmFtZRIhCgV2YWx1ZRgCIAEoCzISLmNwZy5Qcm9wZXJ0eVZh",
            "bHVlIpcDCghFZGdlVHlwZRIVChFVTktOT1dOX0VER0VfVFlQRRAAEgcKA0FT",
            "VBADEggKBENBTEwQBhIHCgNSRUYQChINCglUQUdHRURfQlkQCxISCg5QQVJB",
            "TUVURVJfTElOSxAMEgcKA0NGRxATEg0KCUVWQUxfVFlQRRAVEgwKCEJJTkRT",
            "X1RPEBYSEQoNSU5IRVJJVFNfRlJPTRAXEgwKCENPTlRBSU5TEBwSCwoHQ0FQ",
            "VFVSRRAoEg8KC0NBUFRVUkVEX0JZECkSDAoIUkVDRUlWRVIQNxINCglDT05E",
            "SVRJT04QOBIRCgxSRUFDSElOR19ERUYQiQESDQoIQUxJQVNfT0YQigESCgoF",
            "QklORFMQmwESDQoIQVJHVU1FTlQQnAESEAoLU09VUkNFX0ZJTEUQnQESDQoI",
            "RE9NSU5BVEUQtQESEgoNUE9TVF9ET01JTkFURRC2ARIICgNDREcQtwESDgoJ",
            "UE9JTlRTX1RPELlgEg0KB0lNUE9SVFMQ77gBEhgKEklTX0NBTExfRk9SX0lN",
            "UE9SVBDwuAFKBAgFEAZSA2tleSJZChZBZGRpdGlvbmFsTm9kZVByb3BlcnR5",
            "Eg8KB25vZGVfaWQYASABKAMSLgoIcHJvcGVydHkYAiABKAsyHC5jcGcuQ3Bn",
            "U3RydWN0Lk5vZGUuUHJvcGVydHkitQEKFkFkZGl0aW9uYWxFZGdlUHJvcGVy",
            "dHkSDwoHZWRnZV9pZBgBIAEoAxIuCghwcm9wZXJ0eRgCIAEoCzIcLmNwZy5D",
            "cGdTdHJ1Y3QuRWRnZS5Qcm9wZXJ0eRIUCgxvdXRfbm9kZV9rZXkYAyABKAMS",
            "EwoLaW5fbm9kZV9rZXkYBCABKAMSLwoJZWRnZV90eXBlGAUgASgOMhwuY3Bn",
            "LkNwZ1N0cnVjdC5FZGdlLkVkZ2VUeXBlIroBCgpDcGdPdmVybGF5EiEKBG5v",
            "ZGUYASADKAsyEy5jcGcuQ3BnU3RydWN0Lk5vZGUSIQoEZWRnZRgCIAMoCzIT",
            "LmNwZy5DcGdTdHJ1Y3QuRWRnZRIyCg1ub2RlX3Byb3BlcnR5GAMgAygLMhsu",
            "Y3BnLkFkZGl0aW9uYWxOb2RlUHJvcGVydHkSMgoNZWRnZV9wcm9wZXJ0eRgE",
            "IAMoCzIbLmNwZy5BZGRpdGlvbmFsRWRnZVByb3BlcnR5IpgHCglEaWZmR3Jh",
            "cGgSJQoHZW50cmllcxgBIAMoCzIULmNwZy5EaWZmR3JhcGguRW50cnkaGQoK",
            "UmVtb3ZlTm9kZRILCgNrZXkYASABKAMaWgoSUmVtb3ZlTm9kZVByb3BlcnR5",
            "EgsKA2tleRgBIAEoAxIjCgRuYW1lGAIgASgOMhUuY3BnLk5vZGVQcm9wZXJ0",
            "eU5hbWUSEgoKbG9jYWxfbmFtZRgDIAEoCRqAAQoKUmVtb3ZlRWRnZRIUCgxv",
            "dXRfbm9kZV9rZXkYASABKAMSEwoLaW5fbm9kZV9rZXkYAiABKAMSLwoJZWRn",
            "ZV90eXBlGAMgASgOMhwuY3BnLkNwZ1N0cnVjdC5FZGdlLkVkZ2VUeXBlEhYK",
            "DnByb3BlcnRpZXNIYXNoGAQgASgMGrYBChJSZW1vdmVFZGdlUHJvcGVydHkS",
            "FAoMb3V0X25vZGVfa2V5GAEgASgDEhMKC2luX25vZGVfa2V5GAIgASgDEi8K",
            "CWVkZ2VfdHlwZRgDIAEoDjIcLmNwZy5DcGdTdHJ1Y3QuRWRnZS5FZGdlVHlw",
            "ZRIWCg5wcm9wZXJ0aWVzSGFzaBgEIAEoDBIsCg1wcm9wZXJ0eV9uYW1lGAUg",
            "ASgOMhUuY3BnLkVkZ2VQcm9wZXJ0eU5hbWUasAMKBUVudHJ5EiMKBG5vZGUY",
            "ASABKAsyEy5jcGcuQ3BnU3RydWN0Lk5vZGVIABIjCgRlZGdlGAIgASgLMhMu",
            "Y3BnLkNwZ1N0cnVjdC5FZGdlSAASNAoNbm9kZV9wcm9wZXJ0eRgDIAEoCzIb",
            "LmNwZy5BZGRpdGlvbmFsTm9kZVByb3BlcnR5SAASNAoNZWRnZV9wcm9wZXJ0",
            "eRgEIAEoCzIbLmNwZy5BZGRpdGlvbmFsRWRnZVByb3BlcnR5SAASMAoLcmVt",
            "b3ZlX25vZGUYBSABKAsyGS5jcGcuRGlmZkdyYXBoLlJlbW92ZU5vZGVIABJB",
            "ChRyZW1vdmVfbm9kZV9wcm9wZXJ0eRgGIAEoCzIhLmNwZy5EaWZmR3JhcGgu",
            "UmVtb3ZlTm9kZVByb3BlcnR5SAASMAoLcmVtb3ZlX2VkZ2UYByABKAsyGS5j",
            "cGcuRGlmZkdyYXBoLlJlbW92ZUVkZ2VIABJBChRyZW1vdmVfZWRnZV9wcm9w",
            "ZXJ0eRgIIAEoCzIhLmNwZy5EaWZmR3JhcGguUmVtb3ZlRWRnZVByb3BlcnR5",
            "SABCBwoFdmFsdWUqpQcKEE5vZGVQcm9wZXJ0eU5hbWUSGQoVVU5LTk9XTl9O",
            "T0RFX1BST1BFUlRZEAASDwoLTElORV9OVU1CRVIQAhIUChBQQVJTRVJfVFlQ",
            "RV9OQU1FEAMSCQoFT1JERVIQBBIICgROQU1FEAUSDQoJRlVMTF9OQU1FEAYS",
            "DwoLSVNfRVhURVJOQUwQBxIJCgVWQUxVRRAIEhEKDUNPTFVNTl9OVU1CRVIQ",
            "CxITCg9MSU5FX05VTUJFUl9FTkQQDBILCgdWRVJTSU9OEA0SFwoTRVZBTFVB",
            "VElPTl9TVFJBVEVHWRAPEhUKEUNPTFVNTl9OVU1CRVJfRU5EEBASDAoITEFO",
            "R1VBR0UQExILCgdDT05URU5UEBQSCAoEQ09ERRAVEg0KCVNJR05BVFVSRRAW",
            "EhEKDURJU1BBVENIX1RZUEUQGRIRCg1NT0RJRklFUl9UWVBFEBoSGgoWQ09O",
            "VFJPTF9TVFJVQ1RVUkVfVFlQRRAbEhIKDkFSR1VNRU5UX0lOREVYECgSFgoS",
            "Q0xPU1VSRV9CSU5ESU5HX0lEEDISEgoOVFlQRV9GVUxMX05BTUUQMxIXChNU",
            "WVBFX0RFQ0xfRlVMTF9OQU1FEDQSIAocSU5IRVJJVFNfRlJPTV9UWVBFX0ZV",
            "TExfTkFNRRA1EhQKEE1FVEhPRF9GVUxMX05BTUUQNhITCg9BU1RfUEFSRU5U",
            "X1RZUEUQOBIYChRBU1RfUEFSRU5UX0ZVTExfTkFNRRA5EhcKE0RFUEVOREVO",
            "Q1lfR1JPVVBfSUQQOhIKCgZTWU1CT0wQZBIVChFNRVRIT0RfU0hPUlRfTkFN",
            "RRBmEhAKDFBBQ0tBR0VfTkFNRRBnEg4KCkNMQVNTX05BTUUQaBIOCgpOT0RF",
            "X0xBQkVMEGkSDAoIRklMRU5BTUUQahIMCghPVkVSTEFZUxB2EggKBEhBU0gQ",
            "eBISCg1BUkdVTUVOVF9OQU1FEIIBEggKA0tFWRCDARIVChBDTEFTU19TSE9S",
            "VF9OQU1FEIQBEhkKFEFMSUFTX1RZUEVfRlVMTF9OQU1FEJ4BEhoKFUNMT1NV",
            "UkVfT1JJR0lOQUxfTkFNRRCfARIQCgtJU19WQVJJQURJQxDdARIJCgRST09U",
            "EK8JEiAKG0RZTkFNSUNfVFlQRV9ISU5UX0ZVTExfTkFNRRC3DBIKCgVJTkRF",
            "WBCvERIUCg5DQU5PTklDQUxfTkFNRRDEkXoSEwoNQ09OVEFJTkVEX1JFRhD5",
            "wHoqOwoQRWRnZVByb3BlcnR5TmFtZRIZChVVTktOT1dOX0VER0VfUFJPUEVS",
            "VFkQABIMCghWQVJJQUJMRRALKr0BCg1Nb2RpZmllclR5cGVzEhkKFVVOS05P",
            "V05fTU9ESUZJRVJfVFlQRRAAEgoKBlNUQVRJQxABEgoKBlBVQkxJQxACEg0K",
            "CVBST1RFQ1RFRBADEgsKB1BSSVZBVEUQBBIMCghBQlNUUkFDVBAFEgoKBk5B",
            "VElWRRAGEg8KC0NPTlNUUlVDVE9SEAcSCwoHVklSVFVBTBAIEgwKCElOVEVS",
            "TkFMEAkSCQoFRklOQUwQChIMCghSRUFET05MWRALKvIBCglMQU5HVUFHRVMS",
            "FAoQVU5LTk9XTl9MQU5HVUFHRRAAEggKBEpBVkEQARIOCgpKQVZBU0NSSVBU",
            "EAISCgoGR09MQU5HEAMSCgoGQ1NIQVJQEAQSBQoBQxAFEgoKBlBZVEhPThAG",
            "EggKBExMVk0QBxIHCgNQSFAQCBITCg9GVVpaWV9URVNUX0xBTkcQCRIKCgZH",
            "SElEUkEQChIKCgZLT1RMSU4QCxIICgRORVdDEAwSCwoHSkFWQVNSQxANEg0K",
            "CVBZVEhPTlNSQxAOEgkKBUpTU1JDEA8SDAoIU09MSURJVFkQEBILCgdSVUJZ",
            "U1JDEBEqZwoURXZhbHVhdGlvblN0cmF0ZWdpZXMSHwobVU5LTk9XTl9FVkFM",
            "VUFUSU9OX1NUUkFURUdZEAASEAoMQllfUkVGRVJFTkNFEAESDgoKQllfU0hB",
            "UklORxACEgwKCEJZX1ZBTFVFEAMqYgoNRGlzcGF0Y2hUeXBlcxIZChVVTktO",
            "T1dOX0RJU1BBVENIX1RZUEUQABITCg9TVEFUSUNfRElTUEFUQ0gQARIUChBE",
            "WU5BTUlDX0RJU1BBVENIEAISCwoHSU5MSU5FRBADKsQBChdDT05UUk9MX1NU",
            "UlVDVFVSRV9UWVBFUxIiCh5VTktOT1dOX0NPTlRST0xfU1RSVUNUVVJFX1RZ",
            "UEUQABIJCgVCUkVBSxABEgwKCENPTlRJTlVFEAISCQoFV0hJTEUQAxIGCgJE",
            "TxAEEgcKA0ZPUhAFEggKBEdPVE8QBhIGCgJJRhAHEggKBEVMU0UQCBIKCgZT",
            "V0lUQ0gQCRIHCgNUUlkQChIJCgVUSFJPVxALEgkKBU1BVENIEAwSCQoFWUlF",
            "TEQQDUJeChZpby5zaGlmdGxlZnQucHJvdG8uY3BnQgNDcGdaJmdpdGh1Yi5j",
            "b20vU2hpZnRMZWZ0U2VjdXJpdHkvcHJvdG8vY3BnqgIWaW8uc2hpZnRsZWZ0",
            "LnByb3RvLmNwZ2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::io.shiftleft.proto.cpg.NodePropertyName), typeof(global::io.shiftleft.proto.cpg.EdgePropertyName), typeof(global::io.shiftleft.proto.cpg.ModifierTypes), typeof(global::io.shiftleft.proto.cpg.LANGUAGES), typeof(global::io.shiftleft.proto.cpg.EvaluationStrategies), typeof(global::io.shiftleft.proto.cpg.DispatchTypes), typeof(global::io.shiftleft.proto.cpg.CONTROL_STRUCTURE_TYPES), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.PropertyValue), global::io.shiftleft.proto.cpg.PropertyValue.Parser, new[]{ "StringValue", "BoolValue", "IntValue", "LongValue", "FloatValue", "DoubleValue", "StringList", "BoolList", "IntList", "LongList", "FloatList", "DoubleList", "ContainedRefs" }, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.ContainedRefs), global::io.shiftleft.proto.cpg.ContainedRefs.Parser, new[]{ "LocalName", "Refs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.StringList), global::io.shiftleft.proto.cpg.StringList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.BoolList), global::io.shiftleft.proto.cpg.BoolList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.IntList), global::io.shiftleft.proto.cpg.IntList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.LongList), global::io.shiftleft.proto.cpg.LongList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.FloatList), global::io.shiftleft.proto.cpg.FloatList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DoubleList), global::io.shiftleft.proto.cpg.DoubleList.Parser, new[]{ "Values" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.CpgStruct), global::io.shiftleft.proto.cpg.CpgStruct.Parser, new[]{ "Node", "Edge" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.CpgStruct.Types.Node), global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Parser, new[]{ "Key", "Type", "Property" }, null, new[]{ typeof(global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property), global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property.Parser, new[]{ "Name", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge), global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Parser, new[]{ "Src", "Dst", "Type", "Property" }, null, new[]{ typeof(global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property), global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property.Parser, new[]{ "Name", "Value" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.AdditionalNodeProperty), global::io.shiftleft.proto.cpg.AdditionalNodeProperty.Parser, new[]{ "NodeId", "Property" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.AdditionalEdgeProperty), global::io.shiftleft.proto.cpg.AdditionalEdgeProperty.Parser, new[]{ "EdgeId", "Property", "OutNodeKey", "InNodeKey", "EdgeType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.CpgOverlay), global::io.shiftleft.proto.cpg.CpgOverlay.Parser, new[]{ "Node", "Edge", "NodeProperty", "EdgeProperty" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DiffGraph), global::io.shiftleft.proto.cpg.DiffGraph.Parser, new[]{ "Entries" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode), global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode.Parser, new[]{ "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty), global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty.Parser, new[]{ "Key", "Name", "LocalName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge), global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge.Parser, new[]{ "OutNodeKey", "InNodeKey", "EdgeType", "PropertiesHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty), global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty.Parser, new[]{ "OutNodeKey", "InNodeKey", "EdgeType", "PropertiesHash", "PropertyName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry), global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry.Parser, new[]{ "Node", "Edge", "NodeProperty", "EdgeProperty", "RemoveNode", "RemoveNodeProperty", "RemoveEdge", "RemoveEdgeProperty" }, new[]{ "Value" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum NodePropertyName {
    [pbr::OriginalName("UNKNOWN_NODE_PROPERTY")] UnknownNodeProperty = 0,
    /// <summary>
    /// This optional field provides the line number of the program construct
    ///represented by the node. 
    /// </summary>
    [pbr::OriginalName("LINE_NUMBER")] LineNumber = 2,
    /// <summary>
    /// AST node type name emitted by parser. 
    /// </summary>
    [pbr::OriginalName("PARSER_TYPE_NAME")] ParserTypeName = 3,
    /// <summary>
    /// This integer indicates the position of the node among
    ///its siblings in the AST. The left-most child has an
    ///order of 0. 
    /// </summary>
    [pbr::OriginalName("ORDER")] Order = 4,
    /// <summary>
    /// Name of represented object, e.g., method name (e.g. "run") 
    /// </summary>
    [pbr::OriginalName("NAME")] Name = 5,
    /// <summary>
    /// This is the fully-qualified name of an entity, e.g., the fully-qualified
    ///name of a method or type. The details of what constitutes a fully-qualified
    ///name are language specific. This field SHOULD be human readable. 
    /// </summary>
    [pbr::OriginalName("FULL_NAME")] FullName = 6,
    /// <summary>
    /// Indicates that the construct (METHOD or TYPE_DECL) is external, that is,
    ///it is referenced but not defined in the code (applies both to insular
    ///parsing and to library functions where we have header files only) 
    /// </summary>
    [pbr::OriginalName("IS_EXTERNAL")] IsExternal = 7,
    /// <summary>
    /// This property denotes a string value as used in a key-value pair. 
    /// </summary>
    [pbr::OriginalName("VALUE")] Value = 8,
    /// <summary>
    /// This optional fields provides the column number of the program construct
    ///represented by the node. 
    /// </summary>
    [pbr::OriginalName("COLUMN_NUMBER")] ColumnNumber = 11,
    /// <summary>
    /// This optional fields provides the line number at which the program construct
    ///represented by the node ends. 
    /// </summary>
    [pbr::OriginalName("LINE_NUMBER_END")] LineNumberEnd = 12,
    /// <summary>
    /// A version, given as a string. Used, for example, in the META_DATA node to
    ///indicate which version of the CPG spec this CPG conforms to 
    /// </summary>
    [pbr::OriginalName("VERSION")] Version = 13,
    /// <summary>
    /// For formal method input parameters, output parameters, and return parameters,
    ///this field holds the evaluation strategy, which is one of the following:
    ///1) `BY_REFERENCE` indicates that the parameter is passed by reference, 2)
    ///`BY_VALUE` indicates that it is passed by value, that is, a copy is made,
    ///3) `BY_SHARING` the parameter is a pointer/reference and it is shared with
    ///the caller/callee. While a copy of the pointer is made, a copy of the object
    ///that it points to is not made. 
    /// </summary>
    [pbr::OriginalName("EVALUATION_STRATEGY")] EvaluationStrategy = 15,
    /// <summary>
    /// This optional fields provides the column number at which the program construct
    ///represented by the node ends. 
    /// </summary>
    [pbr::OriginalName("COLUMN_NUMBER_END")] ColumnNumberEnd = 16,
    /// <summary>
    /// This field indicates which CPG language frontend generated the CPG.
    ///Frontend developers may freely choose a value that describes their frontend
    ///so long as it is not used by an existing frontend. Reserved values are to date:
    ///C, LLVM, GHIDRA, PHP. 
    /// </summary>
    [pbr::OriginalName("LANGUAGE")] Language = 19,
    /// <summary>
    /// Certain files, e.g., configuration files, may be included in the CPG as-is.
    ///For such files, the `CONTENT` field contains the files content. 
    /// </summary>
    [pbr::OriginalName("CONTENT")] Content = 20,
    /// <summary>
    /// This field holds the code snippet that the node represents. 
    /// </summary>
    [pbr::OriginalName("CODE")] Code = 21,
    /// <summary>
    /// The method signature encodes the types of parameters in a string.
    ///The string SHOULD be human readable and suitable for differentiating methods
    ///with different parameter types sufficiently to allow for resolving of
    ///function overloading. The present specification does not enforce a strict
    ///format for the signature, that is, it can be chosen by the frontend
    ///implementor to fit the source language. 
    /// </summary>
    [pbr::OriginalName("SIGNATURE")] Signature = 22,
    /// <summary>
    /// This field holds the dispatch type of a call, which is either `STATIC_DISPATCH` or
    ///`DYNAMIC_DISPATCH`. For statically dispatched method calls, the call target is known
    ///at compile time while for dynamically dispatched calls, it can only be determined at
    ///runtime as it may depend on the type of an object (as is the case for virtual method
    ///calls) or calculation of an offset. 
    /// </summary>
    [pbr::OriginalName("DISPATCH_TYPE")] DispatchType = 25,
    /// <summary>
    /// The modifier type is a free-form string. The following are known modifier types:
    ///`STATIC`, `PUBLIC`, `PROTECTED`, `PRIVATE`, `ABSTRACT`, `NATIVE`, `CONSTRUCTOR`, `VIRTUAL`. 
    /// </summary>
    [pbr::OriginalName("MODIFIER_TYPE")] ModifierType = 26,
    /// <summary>
    /// The `CONTROL_STRUCTURE_TYPE` field indicates which kind of control structure
    ///a `CONTROL_STRUCTURE` node represents. The available types are the following:
    ///BREAK, CONTINUE, DO, WHILE, FOR, GOTO, IF, ELSE, TRY, THROW and SWITCH. 
    /// </summary>
    [pbr::OriginalName("CONTROL_STRUCTURE_TYPE")] ControlStructureType = 27,
    /// <summary>
    /// AST-children of CALL nodes have an argument index, that is used to match
    ///call-site arguments with callee parameters. Explicit parameters are numbered
    ///from 1 to N, while index 0 is reserved for implicit self / this parameter.
    ///CALLs without implicit parameter therefore have arguments starting with index 1.
    ///AST-children of BLOCK nodes may have an argument index as well; in this case,
    ///the last argument index determines the return expression of a BLOCK expression.
    ///If the `PARAMETER_NAME` field is set, then the `ARGUMENT_INDEX` field is
    ///ignored. It is suggested to set it to -1. 
    /// </summary>
    [pbr::OriginalName("ARGUMENT_INDEX")] ArgumentIndex = 40,
    /// <summary>
    /// Identifier which uniquely describes a CLOSURE_BINDING. This property is used to match captured LOCAL nodes with the corresponding CLOSURE_BINDING nodes 
    /// </summary>
    [pbr::OriginalName("CLOSURE_BINDING_ID")] ClosureBindingId = 50,
    /// <summary>
    /// This field contains the fully-qualified static type name of the program
    ///construct represented by a node. It is the name of an instantiated type, e.g.,
    ///`java.util.List&lt;Integer>`, rather than `java.util.List[T]`. If the type
    ///cannot be determined, this field should be set to the empty string. 
    /// </summary>
    [pbr::OriginalName("TYPE_FULL_NAME")] TypeFullName = 51,
    /// <summary>
    /// The static type decl of a TYPE. This property is matched against the FULL_NAME
    ///of TYPE_DECL nodes. It is required to have exactly one TYPE_DECL for each
    ///different TYPE_DECL_FULL_NAME 
    /// </summary>
    [pbr::OriginalName("TYPE_DECL_FULL_NAME")] TypeDeclFullName = 52,
    /// <summary>
    /// The static types a TYPE_DECL inherits from. This property is matched against the
    ///FULL_NAME of TYPE nodes and thus it is required to have at least one TYPE node
    ///for each TYPE_FULL_NAME 
    /// </summary>
    [pbr::OriginalName("INHERITS_FROM_TYPE_FULL_NAME")] InheritsFromTypeFullName = 53,
    /// <summary>
    /// The FULL_NAME of a method. Used to link CALL and METHOD nodes. It is required
    ///to have exactly one METHOD node for each METHOD_FULL_NAME 
    /// </summary>
    [pbr::OriginalName("METHOD_FULL_NAME")] MethodFullName = 54,
    /// <summary>
    /// The type of the AST parent. Since this is only used in some parts of the graph,
    ///the list does not include all possible parents by intention.
    ///Possible parents: METHOD, TYPE_DECL, NAMESPACE_BLOCK. 
    /// </summary>
    [pbr::OriginalName("AST_PARENT_TYPE")] AstParentType = 56,
    /// <summary>
    /// This field holds the FULL_NAME of the AST parent of an entity. 
    /// </summary>
    [pbr::OriginalName("AST_PARENT_FULL_NAME")] AstParentFullName = 57,
    /// <summary>
    /// The group ID for a dependency 
    /// </summary>
    [pbr::OriginalName("DEPENDENCY_GROUP_ID")] DependencyGroupId = 58,
    [pbr::OriginalName("SYMBOL")] Symbol = 100,
    [pbr::OriginalName("METHOD_SHORT_NAME")] MethodShortName = 102,
    [pbr::OriginalName("PACKAGE_NAME")] PackageName = 103,
    [pbr::OriginalName("CLASS_NAME")] ClassName = 104,
    [pbr::OriginalName("NODE_LABEL")] NodeLabel = 105,
    /// <summary>
    /// The path of the source file this node was generated from, relative to the root
    ///path in the meta data node. This field must be set but may be set to the value `&lt;unknown>` to
    ///indicate that no source file can be associated with the node, e.g., because the node represents
    ///an entity known to exist because it is referenced, but for which the file that is is declared in
    ///is unknown. 
    /// </summary>
    [pbr::OriginalName("FILENAME")] Filename = 106,
    /// <summary>
    /// The field contains the names of the overlays applied to this CPG, in order of their
    ///application. Names are free-form strings, that is, this specification does not
    ///dictate them but rather requires tool producers and consumers to communicate them
    ///between each other. 
    /// </summary>
    [pbr::OriginalName("OVERLAYS")] Overlays = 118,
    /// <summary>
    /// This property contains a hash value in the form of a string.
    ///Hashes can be used to summarize data, e.g., to summarize the
    ///contents of source files or sub graphs. Such summaries are useful
    ///to determine whether code has already been analyzed in incremental
    ///analysis pipelines. This property is optional to allow its calculation
    ///to be deferred or skipped if the hash is not needed. 
    /// </summary>
    [pbr::OriginalName("HASH")] Hash = 120,
    /// <summary>
    /// For calls involving named parameters, the `ARGUMENT_NAME` field holds the
    ///name of the parameter initialized by the expression. For all other calls,
    ///this field is unset. 
    /// </summary>
    [pbr::OriginalName("ARGUMENT_NAME")] ArgumentName = 130,
    /// <summary>
    /// This property denotes a key of a key-value pair. 
    /// </summary>
    [pbr::OriginalName("KEY")] Key = 131,
    [pbr::OriginalName("CLASS_SHORT_NAME")] ClassShortName = 132,
    /// <summary>
    /// This property holds the fully qualified name of the type that the node is
    ///a type alias of. 
    /// </summary>
    [pbr::OriginalName("ALIAS_TYPE_FULL_NAME")] AliasTypeFullName = 158,
    /// <summary>
    /// The original name of the (potentially mangled) captured variable 
    /// </summary>
    [pbr::OriginalName("CLOSURE_ORIGINAL_NAME")] ClosureOriginalName = 159,
    /// <summary>
    /// Specifies whether a parameter is the variadic argument handling parameter of
    ///a variadic method. Only one parameter of a method is allowed to have this
    ///property set to true. 
    /// </summary>
    [pbr::OriginalName("IS_VARIADIC")] IsVariadic = 221,
    /// <summary>
    /// The path to the root directory of the source/binary this CPG is generated from. 
    /// </summary>
    [pbr::OriginalName("ROOT")] Root = 1199,
    /// <summary>
    /// Type hint for the dynamic type 
    /// </summary>
    [pbr::OriginalName("DYNAMIC_TYPE_HINT_FULL_NAME")] DynamicTypeHintFullName = 1591,
    /// <summary>
    /// Specifies an index, e.g., for a parameter or argument.
    ///Explicit parameters are numbered from 1 to N, while index 0 is reserved for implicit
    ///self / this parameter. 
    /// </summary>
    [pbr::OriginalName("INDEX")] Index = 2223,
    /// <summary>
    /// This field holds the canonical name of a `FIELD_IDENTIFIER`. It is typically
    ///identical to the CODE field, but canonicalized according to source language
    ///semantics. Human readable names are preferable. `FIELD_IDENTIFIER` nodes must
    ///share identical `CANONICAL_NAME` if and
    ///only if they alias, e.g., in C-style unions (if the aliasing relationship is
    ///unknown or there are partial overlaps, then one must make a reasonable guess,
    ///and trade off between false negatives and false positives). 
    /// </summary>
    [pbr::OriginalName("CANONICAL_NAME")] CanonicalName = 2001092,
    /// <summary>
    /// References to other nodes. This is not a real property; it exists here for the sake of proto serialization only. valueType and cardinality are meaningless. 
    /// </summary>
    [pbr::OriginalName("CONTAINED_REF")] ContainedRef = 2007161,
  }

  public enum EdgePropertyName {
    [pbr::OriginalName("UNKNOWN_EDGE_PROPERTY")] UnknownEdgeProperty = 0,
    /// <summary>
    /// This edge property represents the variable propagated by a reaching definition edge. 
    /// </summary>
    [pbr::OriginalName("VARIABLE")] Variable = 11,
  }

  public enum ModifierTypes {
    [pbr::OriginalName("UNKNOWN_MODIFIER_TYPE")] UnknownModifierType = 0,
    /// <summary>
    /// The static modifier 
    /// </summary>
    [pbr::OriginalName("STATIC")] Static = 1,
    /// <summary>
    /// The public modifier 
    /// </summary>
    [pbr::OriginalName("PUBLIC")] Public = 2,
    /// <summary>
    /// The protected modifier 
    /// </summary>
    [pbr::OriginalName("PROTECTED")] Protected = 3,
    /// <summary>
    /// The private modifier 
    /// </summary>
    [pbr::OriginalName("PRIVATE")] Private = 4,
    /// <summary>
    /// The abstract modifier 
    /// </summary>
    [pbr::OriginalName("ABSTRACT")] Abstract = 5,
    /// <summary>
    /// The native modifier 
    /// </summary>
    [pbr::OriginalName("NATIVE")] Native = 6,
    /// <summary>
    /// The constructor modifier 
    /// </summary>
    [pbr::OriginalName("CONSTRUCTOR")] Constructor = 7,
    /// <summary>
    /// The virtual modifier 
    /// </summary>
    [pbr::OriginalName("VIRTUAL")] Virtual = 8,
    /// <summary>
    /// The internal modifier 
    /// </summary>
    [pbr::OriginalName("INTERNAL")] Internal = 9,
    /// <summary>
    /// The final modifier 
    /// </summary>
    [pbr::OriginalName("FINAL")] Final = 10,
    /// <summary>
    /// The readonly modifier 
    /// </summary>
    [pbr::OriginalName("READONLY")] Readonly = 11,
  }

  public enum LANGUAGES {
    [pbr::OriginalName("UNKNOWN_LANGUAGE")] UnknownLanguage = 0,
    [pbr::OriginalName("JAVA")] Java = 1,
    [pbr::OriginalName("JAVASCRIPT")] Javascript = 2,
    [pbr::OriginalName("GOLANG")] Golang = 3,
    [pbr::OriginalName("CSHARP")] Csharp = 4,
    [pbr::OriginalName("C")] C = 5,
    [pbr::OriginalName("PYTHON")] Python = 6,
    [pbr::OriginalName("LLVM")] Llvm = 7,
    [pbr::OriginalName("PHP")] Php = 8,
    [pbr::OriginalName("FUZZY_TEST_LANG")] FuzzyTestLang = 9,
    /// <summary>
    /// generic reverse engineering framework 
    /// </summary>
    [pbr::OriginalName("GHIDRA")] Ghidra = 10,
    [pbr::OriginalName("KOTLIN")] Kotlin = 11,
    /// <summary>
    /// Eclipse CDT based parser for C/C++ 
    /// </summary>
    [pbr::OriginalName("NEWC")] Newc = 12,
    /// <summary>
    /// Source-based front-end for Java 
    /// </summary>
    [pbr::OriginalName("JAVASRC")] Javasrc = 13,
    /// <summary>
    /// Source-based front-end for Python 
    /// </summary>
    [pbr::OriginalName("PYTHONSRC")] Pythonsrc = 14,
    /// <summary>
    /// Source-based JS frontend based on Babel 
    /// </summary>
    [pbr::OriginalName("JSSRC")] Jssrc = 15,
    /// <summary>
    /// Solidity language frontend 
    /// </summary>
    [pbr::OriginalName("SOLIDITY")] Solidity = 16,
    /// <summary>
    /// Source-based frontend for Ruby 
    /// </summary>
    [pbr::OriginalName("RUBYSRC")] Rubysrc = 17,
  }

  public enum EvaluationStrategies {
    [pbr::OriginalName("UNKNOWN_EVALUATION_STRATEGY")] UnknownEvaluationStrategy = 0,
    /// <summary>
    /// A parameter or return of a function is passed by reference which means an address is used behind the scenes 
    /// </summary>
    [pbr::OriginalName("BY_REFERENCE")] ByReference = 1,
    /// <summary>
    /// Only applicable to object parameter or return values. The pointer to the object is passed by value but the object itself is not copied and changes to it are thus propagated out of the method context 
    /// </summary>
    [pbr::OriginalName("BY_SHARING")] BySharing = 2,
    /// <summary>
    /// A parameter or return of a function passed by value which means a flat copy is used 
    /// </summary>
    [pbr::OriginalName("BY_VALUE")] ByValue = 3,
  }

  public enum DispatchTypes {
    [pbr::OriginalName("UNKNOWN_DISPATCH_TYPE")] UnknownDispatchType = 0,
    /// <summary>
    /// For statically dispatched calls the call target is known before program execution 
    /// </summary>
    [pbr::OriginalName("STATIC_DISPATCH")] StaticDispatch = 1,
    /// <summary>
    /// For dynamically dispatched calls the target is determined during runtime 
    /// </summary>
    [pbr::OriginalName("DYNAMIC_DISPATCH")] DynamicDispatch = 2,
    /// <summary>
    /// For macro expansions, code is inlined. 
    /// </summary>
    [pbr::OriginalName("INLINED")] Inlined = 3,
  }

  public enum CONTROL_STRUCTURE_TYPES {
    [pbr::OriginalName("UNKNOWN_CONTROL_STRUCTURE_TYPE")] UnknownControlStructureType = 0,
    /// <summary>
    /// Represents a break statement. Labeled breaks are expected to have a JUMP_LABEL
    ///node AST child with ORDER 1 
    /// </summary>
    [pbr::OriginalName("BREAK")] Break = 1,
    /// <summary>
    /// Represents a continue statement. Labeled continues are expected to have a JUMP_LABEL
    ///node AST child with ORDER 1 
    /// </summary>
    [pbr::OriginalName("CONTINUE")] Continue = 2,
    /// <summary>
    /// Represents a while statement 
    /// </summary>
    [pbr::OriginalName("WHILE")] While = 3,
    /// <summary>
    /// Represents a do statement 
    /// </summary>
    [pbr::OriginalName("DO")] Do = 4,
    /// <summary>
    /// Represents a for statement 
    /// </summary>
    [pbr::OriginalName("FOR")] For = 5,
    /// <summary>
    /// Represents a goto statement 
    /// </summary>
    [pbr::OriginalName("GOTO")] Goto = 6,
    /// <summary>
    /// Represents an if statement 
    /// </summary>
    [pbr::OriginalName("IF")] If = 7,
    /// <summary>
    /// Represents an else statement 
    /// </summary>
    [pbr::OriginalName("ELSE")] Else = 8,
    /// <summary>
    /// Represents a switch statement 
    /// </summary>
    [pbr::OriginalName("SWITCH")] Switch = 9,
    /// <summary>
    /// Represents a try statement 
    /// </summary>
    [pbr::OriginalName("TRY")] Try = 10,
    /// <summary>
    /// Represents a throw statement 
    /// </summary>
    [pbr::OriginalName("THROW")] Throw = 11,
    /// <summary>
    /// Represents a match expression 
    /// </summary>
    [pbr::OriginalName("MATCH")] Match = 12,
    /// <summary>
    /// Represents a yield expression 
    /// </summary>
    [pbr::OriginalName("YIELD")] Yield = 13,
  }

  #endregion

  #region Messages
  public sealed partial class PropertyValue : pb::IMessage<PropertyValue> {
    private static readonly pb::MessageParser<PropertyValue> _parser = new pb::MessageParser<PropertyValue>(() => new PropertyValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PropertyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyValue(PropertyValue other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueOneofCase.LongValue:
          LongValue = other.LongValue;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.StringList:
          StringList = other.StringList.Clone();
          break;
        case ValueOneofCase.BoolList:
          BoolList = other.BoolList.Clone();
          break;
        case ValueOneofCase.IntList:
          IntList = other.IntList.Clone();
          break;
        case ValueOneofCase.LongList:
          LongList = other.LongList.Clone();
          break;
        case ValueOneofCase.FloatList:
          FloatList = other.FloatList.Clone();
          break;
        case ValueOneofCase.DoubleList:
          DoubleList = other.DoubleList.Clone();
          break;
        case ValueOneofCase.ContainedRefs:
          ContainedRefs = other.ContainedRefs.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PropertyValue Clone() {
      return new PropertyValue(this);
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "int_value" field.</summary>
    public const int IntValueFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IntValue {
      get { return valueCase_ == ValueOneofCase.IntValue ? (int) value_ : 0; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.IntValue;
      }
    }

    /// <summary>Field number for the "long_value" field.</summary>
    public const int LongValueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LongValue {
      get { return valueCase_ == ValueOneofCase.LongValue ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.LongValue;
      }
    }

    /// <summary>Field number for the "float_value" field.</summary>
    public const int FloatValueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return valueCase_ == ValueOneofCase.FloatValue ? (float) value_ : 0F; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.FloatValue;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "string_list" field.</summary>
    public const int StringListFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.StringList StringList {
      get { return valueCase_ == ValueOneofCase.StringList ? (global::io.shiftleft.proto.cpg.StringList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.StringList;
      }
    }

    /// <summary>Field number for the "bool_list" field.</summary>
    public const int BoolListFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.BoolList BoolList {
      get { return valueCase_ == ValueOneofCase.BoolList ? (global::io.shiftleft.proto.cpg.BoolList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.BoolList;
      }
    }

    /// <summary>Field number for the "int_list" field.</summary>
    public const int IntListFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.IntList IntList {
      get { return valueCase_ == ValueOneofCase.IntList ? (global::io.shiftleft.proto.cpg.IntList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.IntList;
      }
    }

    /// <summary>Field number for the "long_list" field.</summary>
    public const int LongListFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.LongList LongList {
      get { return valueCase_ == ValueOneofCase.LongList ? (global::io.shiftleft.proto.cpg.LongList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.LongList;
      }
    }

    /// <summary>Field number for the "float_list" field.</summary>
    public const int FloatListFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.FloatList FloatList {
      get { return valueCase_ == ValueOneofCase.FloatList ? (global::io.shiftleft.proto.cpg.FloatList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.FloatList;
      }
    }

    /// <summary>Field number for the "double_list" field.</summary>
    public const int DoubleListFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.DoubleList DoubleList {
      get { return valueCase_ == ValueOneofCase.DoubleList ? (global::io.shiftleft.proto.cpg.DoubleList) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.DoubleList;
      }
    }

    /// <summary>Field number for the "contained_refs" field.</summary>
    public const int ContainedRefsFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.ContainedRefs ContainedRefs {
      get { return valueCase_ == ValueOneofCase.ContainedRefs ? (global::io.shiftleft.proto.cpg.ContainedRefs) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.ContainedRefs;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      StringValue = 1,
      BoolValue = 2,
      IntValue = 3,
      LongValue = 4,
      FloatValue = 5,
      DoubleValue = 6,
      StringList = 7,
      BoolList = 8,
      IntList = 9,
      LongList = 10,
      FloatList = 11,
      DoubleList = 12,
      ContainedRefs = 13,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PropertyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PropertyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StringValue != other.StringValue) return false;
      if (BoolValue != other.BoolValue) return false;
      if (IntValue != other.IntValue) return false;
      if (LongValue != other.LongValue) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (!object.Equals(StringList, other.StringList)) return false;
      if (!object.Equals(BoolList, other.BoolList)) return false;
      if (!object.Equals(IntList, other.IntList)) return false;
      if (!object.Equals(LongList, other.LongList)) return false;
      if (!object.Equals(FloatList, other.FloatList)) return false;
      if (!object.Equals(DoubleList, other.DoubleList)) return false;
      if (!object.Equals(ContainedRefs, other.ContainedRefs)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.IntValue) hash ^= IntValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.LongValue) hash ^= LongValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.FloatValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (valueCase_ == ValueOneofCase.StringList) hash ^= StringList.GetHashCode();
      if (valueCase_ == ValueOneofCase.BoolList) hash ^= BoolList.GetHashCode();
      if (valueCase_ == ValueOneofCase.IntList) hash ^= IntList.GetHashCode();
      if (valueCase_ == ValueOneofCase.LongList) hash ^= LongList.GetHashCode();
      if (valueCase_ == ValueOneofCase.FloatList) hash ^= FloatList.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleList) hash ^= DoubleList.GetHashCode();
      if (valueCase_ == ValueOneofCase.ContainedRefs) hash ^= ContainedRefs.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(10);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(16);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        output.WriteRawTag(24);
        output.WriteInt32(IntValue);
      }
      if (valueCase_ == ValueOneofCase.LongValue) {
        output.WriteRawTag(32);
        output.WriteInt64(LongValue);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        output.WriteRawTag(45);
        output.WriteFloat(FloatValue);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(49);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.StringList) {
        output.WriteRawTag(58);
        output.WriteMessage(StringList);
      }
      if (valueCase_ == ValueOneofCase.BoolList) {
        output.WriteRawTag(66);
        output.WriteMessage(BoolList);
      }
      if (valueCase_ == ValueOneofCase.IntList) {
        output.WriteRawTag(74);
        output.WriteMessage(IntList);
      }
      if (valueCase_ == ValueOneofCase.LongList) {
        output.WriteRawTag(82);
        output.WriteMessage(LongList);
      }
      if (valueCase_ == ValueOneofCase.FloatList) {
        output.WriteRawTag(90);
        output.WriteMessage(FloatList);
      }
      if (valueCase_ == ValueOneofCase.DoubleList) {
        output.WriteRawTag(98);
        output.WriteMessage(DoubleList);
      }
      if (valueCase_ == ValueOneofCase.ContainedRefs) {
        output.WriteRawTag(106);
        output.WriteMessage(ContainedRefs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 1 + 1;
      }
      if (valueCase_ == ValueOneofCase.IntValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IntValue);
      }
      if (valueCase_ == ValueOneofCase.LongValue) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LongValue);
      }
      if (valueCase_ == ValueOneofCase.FloatValue) {
        size += 1 + 4;
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 1 + 8;
      }
      if (valueCase_ == ValueOneofCase.StringList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StringList);
      }
      if (valueCase_ == ValueOneofCase.BoolList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BoolList);
      }
      if (valueCase_ == ValueOneofCase.IntList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IntList);
      }
      if (valueCase_ == ValueOneofCase.LongList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LongList);
      }
      if (valueCase_ == ValueOneofCase.FloatList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FloatList);
      }
      if (valueCase_ == ValueOneofCase.DoubleList) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoubleList);
      }
      if (valueCase_ == ValueOneofCase.ContainedRefs) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContainedRefs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PropertyValue other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.IntValue:
          IntValue = other.IntValue;
          break;
        case ValueOneofCase.LongValue:
          LongValue = other.LongValue;
          break;
        case ValueOneofCase.FloatValue:
          FloatValue = other.FloatValue;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.StringList:
          if (StringList == null) {
            StringList = new global::io.shiftleft.proto.cpg.StringList();
          }
          StringList.MergeFrom(other.StringList);
          break;
        case ValueOneofCase.BoolList:
          if (BoolList == null) {
            BoolList = new global::io.shiftleft.proto.cpg.BoolList();
          }
          BoolList.MergeFrom(other.BoolList);
          break;
        case ValueOneofCase.IntList:
          if (IntList == null) {
            IntList = new global::io.shiftleft.proto.cpg.IntList();
          }
          IntList.MergeFrom(other.IntList);
          break;
        case ValueOneofCase.LongList:
          if (LongList == null) {
            LongList = new global::io.shiftleft.proto.cpg.LongList();
          }
          LongList.MergeFrom(other.LongList);
          break;
        case ValueOneofCase.FloatList:
          if (FloatList == null) {
            FloatList = new global::io.shiftleft.proto.cpg.FloatList();
          }
          FloatList.MergeFrom(other.FloatList);
          break;
        case ValueOneofCase.DoubleList:
          if (DoubleList == null) {
            DoubleList = new global::io.shiftleft.proto.cpg.DoubleList();
          }
          DoubleList.MergeFrom(other.DoubleList);
          break;
        case ValueOneofCase.ContainedRefs:
          if (ContainedRefs == null) {
            ContainedRefs = new global::io.shiftleft.proto.cpg.ContainedRefs();
          }
          ContainedRefs.MergeFrom(other.ContainedRefs);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StringValue = input.ReadString();
            break;
          }
          case 16: {
            BoolValue = input.ReadBool();
            break;
          }
          case 24: {
            IntValue = input.ReadInt32();
            break;
          }
          case 32: {
            LongValue = input.ReadInt64();
            break;
          }
          case 45: {
            FloatValue = input.ReadFloat();
            break;
          }
          case 49: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 58: {
            global::io.shiftleft.proto.cpg.StringList subBuilder = new global::io.shiftleft.proto.cpg.StringList();
            if (valueCase_ == ValueOneofCase.StringList) {
              subBuilder.MergeFrom(StringList);
            }
            input.ReadMessage(subBuilder);
            StringList = subBuilder;
            break;
          }
          case 66: {
            global::io.shiftleft.proto.cpg.BoolList subBuilder = new global::io.shiftleft.proto.cpg.BoolList();
            if (valueCase_ == ValueOneofCase.BoolList) {
              subBuilder.MergeFrom(BoolList);
            }
            input.ReadMessage(subBuilder);
            BoolList = subBuilder;
            break;
          }
          case 74: {
            global::io.shiftleft.proto.cpg.IntList subBuilder = new global::io.shiftleft.proto.cpg.IntList();
            if (valueCase_ == ValueOneofCase.IntList) {
              subBuilder.MergeFrom(IntList);
            }
            input.ReadMessage(subBuilder);
            IntList = subBuilder;
            break;
          }
          case 82: {
            global::io.shiftleft.proto.cpg.LongList subBuilder = new global::io.shiftleft.proto.cpg.LongList();
            if (valueCase_ == ValueOneofCase.LongList) {
              subBuilder.MergeFrom(LongList);
            }
            input.ReadMessage(subBuilder);
            LongList = subBuilder;
            break;
          }
          case 90: {
            global::io.shiftleft.proto.cpg.FloatList subBuilder = new global::io.shiftleft.proto.cpg.FloatList();
            if (valueCase_ == ValueOneofCase.FloatList) {
              subBuilder.MergeFrom(FloatList);
            }
            input.ReadMessage(subBuilder);
            FloatList = subBuilder;
            break;
          }
          case 98: {
            global::io.shiftleft.proto.cpg.DoubleList subBuilder = new global::io.shiftleft.proto.cpg.DoubleList();
            if (valueCase_ == ValueOneofCase.DoubleList) {
              subBuilder.MergeFrom(DoubleList);
            }
            input.ReadMessage(subBuilder);
            DoubleList = subBuilder;
            break;
          }
          case 106: {
            global::io.shiftleft.proto.cpg.ContainedRefs subBuilder = new global::io.shiftleft.proto.cpg.ContainedRefs();
            if (valueCase_ == ValueOneofCase.ContainedRefs) {
              subBuilder.MergeFrom(ContainedRefs);
            }
            input.ReadMessage(subBuilder);
            ContainedRefs = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContainedRefs : pb::IMessage<ContainedRefs> {
    private static readonly pb::MessageParser<ContainedRefs> _parser = new pb::MessageParser<ContainedRefs>(() => new ContainedRefs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContainedRefs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainedRefs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainedRefs(ContainedRefs other) : this() {
      localName_ = other.localName_;
      refs_ = other.refs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContainedRefs Clone() {
      return new ContainedRefs(this);
    }

    /// <summary>Field number for the "local_name" field.</summary>
    public const int LocalNameFieldNumber = 1;
    private string localName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocalName {
      get { return localName_; }
      set {
        localName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refs" field.</summary>
    public const int RefsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_refs_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> refs_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Refs {
      get { return refs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContainedRefs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContainedRefs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalName != other.LocalName) return false;
      if(!refs_.Equals(other.refs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalName.Length != 0) hash ^= LocalName.GetHashCode();
      hash ^= refs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LocalName);
      }
      refs_.WriteTo(output, _repeated_refs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalName);
      }
      size += refs_.CalculateSize(_repeated_refs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContainedRefs other) {
      if (other == null) {
        return;
      }
      if (other.LocalName.Length != 0) {
        LocalName = other.LocalName;
      }
      refs_.Add(other.refs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LocalName = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            refs_.AddEntriesFrom(input, _repeated_refs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringList : pb::IMessage<StringList> {
    private static readonly pb::MessageParser<StringList> _parser = new pb::MessageParser<StringList>(() => new StringList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList(StringList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringList Clone() {
      return new StringList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_values_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> values_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BoolList : pb::IMessage<BoolList> {
    private static readonly pb::MessageParser<BoolList> _parser = new pb::MessageParser<BoolList>(() => new BoolList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BoolList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolList(BoolList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BoolList Clone() {
      return new BoolList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<bool> _repeated_values_codec
        = pb::FieldCodec.ForBool(10);
    private readonly pbc::RepeatedField<bool> values_ = new pbc::RepeatedField<bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BoolList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BoolList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BoolList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntList : pb::IMessage<IntList> {
    private static readonly pb::MessageParser<IntList> _parser = new pb::MessageParser<IntList>(() => new IntList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList(IntList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntList Clone() {
      return new IntList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_values_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> values_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LongList : pb::IMessage<LongList> {
    private static readonly pb::MessageParser<LongList> _parser = new pb::MessageParser<LongList>(() => new LongList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LongList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongList(LongList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LongList Clone() {
      return new LongList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_values_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> values_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LongList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LongList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LongList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FloatList : pb::IMessage<FloatList> {
    private static readonly pb::MessageParser<FloatList> _parser = new pb::MessageParser<FloatList>(() => new FloatList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatList(FloatList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatList Clone() {
      return new FloatList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_values_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> values_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 13: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DoubleList : pb::IMessage<DoubleList> {
    private static readonly pb::MessageParser<DoubleList> _parser = new pb::MessageParser<DoubleList>(() => new DoubleList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DoubleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleList(DoubleList other) : this() {
      values_ = other.values_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DoubleList Clone() {
      return new DoubleList(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<double> _repeated_values_codec
        = pb::FieldCodec.ForDouble(10);
    private readonly pbc::RepeatedField<double> values_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DoubleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DoubleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DoubleList other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 9: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CpgStruct : pb::IMessage<CpgStruct> {
    private static readonly pb::MessageParser<CpgStruct> _parser = new pb::MessageParser<CpgStruct>(() => new CpgStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpgStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpgStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpgStruct(CpgStruct other) : this() {
      node_ = other.node_.Clone();
      edge_ = other.edge_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpgStruct Clone() {
      return new CpgStruct(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node> _repeated_node_codec
        = pb::FieldCodec.ForMessage(10, global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node> node_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node> Node {
      get { return node_; }
    }

    /// <summary>Field number for the "edge" field.</summary>
    public const int EdgeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge> _repeated_edge_codec
        = pb::FieldCodec.ForMessage(18, global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge> edge_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge> Edge {
      get { return edge_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpgStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpgStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!node_.Equals(other.node_)) return false;
      if(!edge_.Equals(other.edge_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= node_.GetHashCode();
      hash ^= edge_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      node_.WriteTo(output, _repeated_node_codec);
      edge_.WriteTo(output, _repeated_edge_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += node_.CalculateSize(_repeated_node_codec);
      size += edge_.CalculateSize(_repeated_edge_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpgStruct other) {
      if (other == null) {
        return;
      }
      node_.Add(other.node_);
      edge_.Add(other.edge_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            node_.AddEntriesFrom(input, _repeated_node_codec);
            break;
          }
          case 18: {
            edge_.AddEntriesFrom(input, _repeated_edge_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CpgStruct message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Node : pb::IMessage<Node> {
        private static readonly pb::MessageParser<Node> _parser = new pb::MessageParser<Node>(() => new Node());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Node> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.CpgStruct.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node(Node other) : this() {
          key_ = other.key_;
          type_ = other.type_;
          property_ = other.property_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Node Clone() {
          return new Node(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private long key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType type_ = global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType.UnknownNodeType;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "property" field.</summary>
        public const int PropertyFieldNumber = 3;
        private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property> _repeated_property_codec
            = pb::FieldCodec.ForMessage(26, global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property.Parser);
        private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property> property_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property> Property {
          get { return property_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Node);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Node other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Type != other.Type) return false;
          if(!property_.Equals(other.property_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key != 0L) hash ^= Key.GetHashCode();
          if (Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType.UnknownNodeType) hash ^= Type.GetHashCode();
          hash ^= property_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Key);
          }
          if (Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType.UnknownNodeType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          property_.WriteTo(output, _repeated_property_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
          }
          if (Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType.UnknownNodeType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          size += property_.CalculateSize(_repeated_property_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Node other) {
          if (other == null) {
            return;
          }
          if (other.Key != 0L) {
            Key = other.Key;
          }
          if (other.Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType.UnknownNodeType) {
            Type = other.Type;
          }
          property_.Add(other.property_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt64();
                break;
              }
              case 16: {
                Type = (global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.NodeType) input.ReadEnum();
                break;
              }
              case 26: {
                property_.AddEntriesFrom(input, _repeated_property_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Node message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Logical node type.
          /// </summary>
          public enum NodeType {
            [pbr::OriginalName("UNKNOWN_NODE_TYPE")] UnknownNodeType = 0,
            /// <summary>
            /// Programming languages offer many closely-related concepts for describing blocks
            ///of code that can be executed with input parameters and return output parameters,
            ///possibly causing side effects. In the CPG specification, we refer to all of these
            ///concepts (procedures, functions, methods, etc.) as methods. A single METHOD node
            ///must exist for each method found in the source program.
            ///
            ///The `FULL_NAME` field specifies the method's fully-qualified name, including
            ///information about the namespace it is contained in if applicable, the name field
            ///is the function's short name. The field `IS_EXTERNAL` indicates whether it was
            ///possible to identify a method body for the method. This is true for methods that
            ///are defined in the source program, and false for methods that are dynamically
            ///linked to the program, that is, methods that exist in an external dependency.
            ///
            ///Line and column number information is specified in the optional fields
            ///`LINE_NUMBER`, `COLUMN_NUMBER`, `LINE_NUMBER_END`, and `COLUMN_NUMBER_END` and
            ///the name of the source file is specified in `FILENAME`. An optional hash value
            ///MAY be calculated over the function contents and included in the `HASH` field.
            ///
            ///Finally, the fully qualified name of the program constructs that the method
            ///is immediately contained in is stored in the `AST_PARENT_FULL_NAME` field
            ///and its type is indicated in the `AST_PARENT_TYPE` field to be one of
            ///`METHOD`, `TYPE_DECL` or `NAMESPACE_BLOCK`. 
            /// </summary>
            [pbr::OriginalName("METHOD")] Method = 1,
            /// <summary>
            /// This node represents an (unnamed) formal method return parameter. It carries its
            ///fully qualified type name in `TYPE_FULL_NAME`. The `CODE` field MAY be set freely,
            ///e.g., to the constant `RET`, however, subsequent layer creators MUST NOT depend
            ///on this value. 
            /// </summary>
            [pbr::OriginalName("METHOD_RETURN")] MethodReturn = 3,
            /// <summary>
            /// A method annotation.
            ///The semantics of the FULL_NAME property on this node differ from the usual FULL_NAME
            ///semantics in the sense that FULL_NAME describes the represented annotation class/interface
            ///itself and not the ANNOTATION node. 
            /// </summary>
            [pbr::OriginalName("ANNOTATION")] Annotation = 5,
            /// <summary>
            /// Assignment of annotation argument to annotation parameter 
            /// </summary>
            [pbr::OriginalName("ANNOTATION_PARAMETER_ASSIGN")] AnnotationParameterAssign = 6,
            /// <summary>
            /// Formal annotation parameter 
            /// </summary>
            [pbr::OriginalName("ANNOTATION_PARAMETER")] AnnotationParameter = 7,
            /// <summary>
            /// This node represents a literal such as an integer or string constant. Literals
            ///are symbols included in the code in verbatim form and which are immutable.
            ///The `TYPE_FULL_NAME` field stores the literal's fully-qualified type name,
            ///e.g., `java.lang.Integer`. 
            /// </summary>
            [pbr::OriginalName("LITERAL")] Literal = 8,
            /// <summary>
            /// This node represents a type member of a class, struct or union, e.g., for the
            ///type declaration `class Foo{ int i ; }`, it represents the declaration of the
            ///variable `i`. 
            /// </summary>
            [pbr::OriginalName("MEMBER")] Member = 9,
            /// <summary>
            /// Initialization construct for arrays 
            /// </summary>
            [pbr::OriginalName("ARRAY_INITIALIZER")] ArrayInitializer = 14,
            /// <summary>
            /// A (function/method/procedure) call. The `METHOD_FULL_NAME` property is the name of the
            ///invoked method (the callee) while the `TYPE_FULL_NAME` is its return type, and
            ///therefore, the return type of the call when viewing it as an expression. For
            ///languages like Javascript, it is common that we may know the (short-) name
            ///of the invoked method, but we do not know at compile time which method
            ///will actually be invoked, e.g., because it depends on a dynamic import.
            ///In this case, we leave `METHOD_FULL_NAME` blank but at least fill out `NAME`,
            ///which contains the method's (short-) name and `SIGNATURE`, which contains
            ///any information we may have about the types of arguments and return value. 
            /// </summary>
            [pbr::OriginalName("CALL")] Call = 15,
            /// <summary>
            /// This node represents a local variable. Its fully qualified type name is stored
            ///in the `TYPE_FULL_NAME` field and its name in the `NAME` field. The `CODE` field
            ///contains the entire local variable declaration without initialization, e.g., for
            ///`int x = 10;`, it contains `int x`. 
            /// </summary>
            [pbr::OriginalName("LOCAL")] Local = 23,
            /// <summary>
            /// This node represents a tag. 
            /// </summary>
            [pbr::OriginalName("TAG")] Tag = 24,
            /// <summary>
            /// A location node summarizes a source code location. 
            /// </summary>
            [pbr::OriginalName("LOCATION")] Location = 25,
            /// <summary>
            /// This node represents an identifier as used when referring to a variable by name.
            ///It holds the identifier's name in the `NAME` field and its fully-qualified type
            ///name in `TYPE_FULL_NAME`. 
            /// </summary>
            [pbr::OriginalName("IDENTIFIER")] Identifier = 27,
            /// <summary>
            /// This node represents a return instruction, e.g., `return x`. Note that it does
            ///NOT represent a formal return parameter as formal return parameters are
            ///represented via `METHOD_RETURN` nodes. 
            /// </summary>
            [pbr::OriginalName("RETURN")] Return = 30,
            /// <summary>
            /// This node represents a compound statement. Compound statements are used in many languages to allow
            ///grouping a sequence of statements. For example, in C and Java, compound statements
            ///are statements enclosed by curly braces. Function/Method bodies are compound
            ///statements. We do not use the term "compound statement" because "statement" would
            ///imply that the block does not yield a value upon evaluation, that is, that it is
            ///not an expression. This is true in languages such as C and Java, but not for languages
            ///such as Scala where the value of the block is given by that of the last expression it
            ///contains. In fact, the Scala grammar uses the term "BlockExpr" (short for
            ///"block expression") to describe what in the CPG we call "Block". 
            /// </summary>
            [pbr::OriginalName("BLOCK")] Block = 31,
            /// <summary>
            /// This node represents a formal output parameter. Corresponding output parameters
            ///for input parameters MUST NOT be created by the frontend as they are automatically
            ///created upon first loading the CPG. 
            /// </summary>
            [pbr::OriginalName("METHOD_PARAMETER_OUT")] MethodParameterOut = 33,
            /// <summary>
            /// This node represents a formal input parameter. The field `NAME` contains its
            ///name, while the field `TYPE_FULL_NAME` contains the fully qualified type name. 
            /// </summary>
            [pbr::OriginalName("METHOD_PARAMETER_IN")] MethodParameterIn = 34,
            /// <summary>
            /// This node represents a dependency 
            /// </summary>
            [pbr::OriginalName("DEPENDENCY")] Dependency = 35,
            /// <summary>
            /// File nodes represent source files or a shared objects from which the CPG
            ///was generated. File nodes serve as indices, that is, they allow looking up all
            ///elements of the code by file.
            ///
            ///For each file, the graph MUST contain exactly one File node.
            ///As file nodes are root nodes of abstract syntax tress, they are AstNodes and
            ///their order field is set to 0. This is because they have no sibling nodes,
            ///not because they are the first node of the AST.
            ///
            ///Each CPG MUST contain a special file node with name set to
            ///`&lt;unknown>`. This node is a placeholder used in cases where a file cannot be
            ///determined at compile time. As an example, consider external library functions.
            ///As their code is not available on CPG construction, the file name is unknown.
            ///
            ///File nodes MUST NOT be created by the language frontend. Instead, the language
            ///frontend is assumed to fill out the `FILENAME` field wherever possible,
            ///allowing File nodes to be created automatically upon first loading the CPG. 
            /// </summary>
            [pbr::OriginalName("FILE")] File = 38,
            /// <summary>
            /// This node contains the CPG meta data. Exactly one node of this type
            ///MUST exist per CPG. The `HASH` property MAY contain a hash value calculated
            ///over the source files this CPG was generated from. The `VERSION` MUST be
            ///set to the version of the specification ("1.1"). The language field indicates
            ///which language frontend was used to generate the CPG and the list property
            ///`OVERLAYS` specifies which overlays have been applied to the CPG. 
            /// </summary>
            [pbr::OriginalName("META_DATA")] MetaData = 39,
            /// <summary>
            /// This node represents a namespace. Similar to FILE nodes, NAMESPACE nodes
            ///serve as indices that allow all definitions inside a namespace to be
            ///obtained by following outgoing edges from a NAMESPACE node.
            ///
            ///NAMESPACE nodes MUST NOT be created by language frontends. Instead,
            ///they are generated from NAMESPACE_BLOCK nodes automatically upon
            ///first loading of the CPG. 
            /// </summary>
            [pbr::OriginalName("NAMESPACE")] Namespace = 40,
            /// <summary>
            /// A reference to a namespace.
            ///We borrow the concept of a "namespace block" from C++, that is, a namespace block
            ///is a block of code that has been placed in the same namespace by a programmer.
            ///This block may be introduced via a `package` statement in Java or
            ///a `namespace{ }` statement in C++.
            ///
            ///The `FULL_NAME` field contains a unique identifier to represent the namespace block
            ///itself not just the namespace it references. So in addition to the namespace name
            ///it can be useful to use the containing file name to derive a unique identifier.
            ///
            ///The `NAME` field contains the namespace name in a human-readable format.
            ///The name should be given in dot-separated form where a dot indicates
            ///that the right hand side is a sub namespace of the left hand side, e.g.,
            ///`foo.bar` denotes the namespace `bar` contained in the namespace `foo`. 
            /// </summary>
            [pbr::OriginalName("NAMESPACE_BLOCK")] NamespaceBlock = 41,
            /// <summary>
            /// Any AST node that the frontend would like to include in the AST but for
            ///which no suitable AST node is specified in the CPG specification may be
            ///included using a node of type `UNKNOWN`. 
            /// </summary>
            [pbr::OriginalName("UNKNOWN")] Unknown = 44,
            /// <summary>
            /// This node represents a type instance, that is, a concrete instantiation
            ///of a type declaration. 
            /// </summary>
            [pbr::OriginalName("TYPE")] Type = 45,
            /// <summary>
            /// This node represents a type declaration as for example given by a class-, struct-,
            ///or union declaration. In contrast to a `TYPE` node, this node does not represent a
            ///concrete instantiation of a type, e.g., for the parametrized type `List[T]`, it represents
            ///`List[T]`, but not `List[Integer]` where `Integer` is a concrete type.
            ///
            ///The language frontend MUST create type declarations for all types declared in the
            ///source program and MAY provide type declarations for types that are not declared
            ///but referenced by the source program. If a declaration is present in the source
            ///program, the field `IS_EXTERNAL` is set to `false`. Otherwise, it is set to `true`.
            ///
            ///The `FULL_NAME` field specifies the type's fully-qualified name, including
            ///information about the namespace it is contained in if applicable, the name field
            ///is the type's short name. Line and column number information is specified in the
            ///optional fields `LINE_NUMBER`, `COLUMN_NUMBER`, `LINE_NUMBER_END`, and
            ///`COLUMN_NUMBER_END` and the name of the source file is specified in `FILENAME`.
            ///
            ///Base types can be specified via the `INHERITS_FROM_TYPE_FULL_NAME` list, where
            ///each entry contains the fully-qualified name of a base type. If the type is
            ///known to be an alias of another type (as for example introduced via the C
            ///`typedef` statement), the name of the alias is stored in `ALIAS_TYPE_FULL_NAME`.
            ///
            ///Finally, the fully qualified name of the program constructs that the type declaration
            ///is immediately contained in is stored in the `AST_PARENT_FULL_NAME` field
            ///and its type is indicated in the `AST_PARENT_TYPE` field to be one of
            ///`METHOD`, `TYPE_DECL` or `NAMESPACE_BLOCK`. 
            /// </summary>
            [pbr::OriginalName("TYPE_DECL")] TypeDecl = 46,
            /// <summary>
            /// This node represents a formal type parameter, that is, the type parameter
            ///as given in a type-parametrized method or type declaration. Examples for
            ///languages that support type parameters are Java (via Generics) and C++
            ///(via templates). Apart from the standard fields of AST nodes, the type
            ///parameter carries only a `NAME` field that holds the parameters name. 
            /// </summary>
            [pbr::OriginalName("TYPE_PARAMETER")] TypeParameter = 47,
            /// <summary>
            /// An (actual) type argument as used to instantiate a parametrized type, in the
            ///same way an (actual) arguments provides concrete values for a parameter
            ///at method call sites. As it true for arguments, the method is not expected
            ///to  interpret the type argument. It MUST however store its code in the
            ///`CODE` field. 
            /// </summary>
            [pbr::OriginalName("TYPE_ARGUMENT")] TypeArgument = 48,
            /// <summary>
            /// A literal value assigned to an ANNOTATION_PARAMETER 
            /// </summary>
            [pbr::OriginalName("ANNOTATION_LITERAL")] AnnotationLiteral = 49,
            /// <summary>
            /// This node type represent a configuration file, where `NAME` is the name
            ///of the file and `content` is its content. The exact representation of the
            ///name is left undefined and can be chosen as required by consumers of
            ///the corresponding configuration files. 
            /// </summary>
            [pbr::OriginalName("CONFIG_FILE")] ConfigFile = 50,
            /// <summary>
            /// `BINDING` nodes represent name-signature pairs that can be resolved at a
            ///type declaration (`TYPE_DECL`). They are connected to `TYPE_DECL` nodes via
            ///incoming `BINDS` edges. The bound method is either associated with an outgoing
            ///`REF` edge to a `METHOD` or with the `METHOD_FULL_NAME` property. The `REF` edge
            ///if present has priority. 
            /// </summary>
            [pbr::OriginalName("BINDING")] Binding = 146,
            /// <summary>
            /// This node contains an arbitrary node and an associated tag node. 
            /// </summary>
            [pbr::OriginalName("TAG_NODE_PAIR")] TagNodePair = 208,
            /// <summary>
            /// Finding nodes may be used to store analysis results in the graph
            ///that are to be exposed to an end-user, e.g., information about
            ///potential vulnerabilities or dangerous programming practices.
            ///A Finding node may contain an abitrary list of key value pairs
            ///that characterize the finding, as well as a list of nodes that
            ///serve as evidence for the finding. 
            /// </summary>
            [pbr::OriginalName("FINDING")] Finding = 214,
            /// <summary>
            /// This node represents a key value pair, where both the key and the value are strings. 
            /// </summary>
            [pbr::OriginalName("KEY_VALUE_PAIR")] KeyValuePair = 217,
            /// <summary>
            /// This field represents a (language-dependent) modifier such as `static`, `private`
            ///or `public`. Unlike most other AST nodes, it is NOT an expression, that is, it
            ///cannot be evaluated and cannot be passed as an argument in function calls. 
            /// </summary>
            [pbr::OriginalName("MODIFIER")] Modifier = 300,
            /// <summary>
            /// This node represents a reference to a method/function/procedure as it
            ///appears when a method is passed as an argument in a call. The `METHOD_FULL_NAME`
            ///field holds the fully-qualified name of the referenced method and the
            ///`TYPE_FULL_NAME` holds its fully-qualified type name. 
            /// </summary>
            [pbr::OriginalName("METHOD_REF")] MethodRef = 333,
            /// <summary>
            /// Represents the binding of a LOCAL or METHOD_PARAMETER_IN into the closure of a method 
            /// </summary>
            [pbr::OriginalName("CLOSURE_BINDING")] ClosureBinding = 334,
            /// <summary>
            /// Reference to a type/class 
            /// </summary>
            [pbr::OriginalName("TYPE_REF")] TypeRef = 335,
            /// <summary>
            /// This node represents a control structure as introduced by control structure
            ///statements as well as conditional and unconditional jumps. Its type is stored in the
            ///`CONTROL_STRUCTURE_TYPE` field to be one of several pre-defined types. These types
            ///are used in the construction of the control flow layer, making it possible to
            ///generate the control flow layer from the abstract syntax tree layer automatically.
            ///
            ///In addition to the `CONTROL_STRUCTURE_TYPE` field, the `PARSER_TYPE_NAME` field
            ///MAY be used by frontends to store the name of the control structure as emitted by
            ///the parser or disassembler, however, the value of this field is not relevant
            ///for construction of the control flow layer. 
            /// </summary>
            [pbr::OriginalName("CONTROL_STRUCTURE")] ControlStructure = 339,
            /// <summary>
            /// A jump target is any location in the code that has been specifically marked
            ///as the target of a jump, e.g., via a label. The `NAME` field holds the name of
            ///the label while the `PARSER_TYPE_NAME` field holds the name of language construct
            ///that this jump target is created from, e.g., "Label". 
            /// </summary>
            [pbr::OriginalName("JUMP_TARGET")] JumpTarget = 340,
            /// <summary>
            /// A jump label specifies the label and thus the JUMP_TARGET of control structures
            ///BREAK and CONTINUE. The `NAME` field holds the name of the label while the
            ///`PARSER_TYPE_NAME` field holds the name of language construct that this jump
            ///label is created from, e.g., "Label". 
            /// </summary>
            [pbr::OriginalName("JUMP_LABEL")] JumpLabel = 341,
            /// <summary>
            /// This node represents a DOM node used in template languages, e.g., JSX/TSX 
            /// </summary>
            [pbr::OriginalName("TEMPLATE_DOM")] TemplateDom = 417,
            /// <summary>
            /// A source code comment 
            /// </summary>
            [pbr::OriginalName("COMMENT")] Comment = 511,
            /// <summary>
            /// This node represents the field accessed in a field access, e.g., in
            ///`a.b`, it represents `b`. The field name as it occurs in the code is
            ///stored in the `CODE` field. This may mean that the `CODE` field holds
            ///an expression. The `CANONICAL_NAME` field MAY contain the same value is
            ///the `CODE` field but SHOULD contain the normalized name that results
            ///from evaluating `CODE` as an expression if such an evaluation is
            ///possible for the language frontend. The objective is to store an identifier
            ///in `CANONICAL_NAME` that is the same for two nodes iff they refer to the
            ///same field, regardless of whether they use the same expression to reference
            ///it. 
            /// </summary>
            [pbr::OriginalName("FIELD_IDENTIFIER")] FieldIdentifier = 2001081,
          }

          /// <summary>
          /// Node properties.
          /// </summary>
          public sealed partial class Property : pb::IMessage<Property> {
            private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Property> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Property() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Property(Property other) : this() {
              name_ = other.name_;
              value_ = other.value_ != null ? other.value_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Property Clone() {
              return new Property(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private global::io.shiftleft.proto.cpg.NodePropertyName name_ = global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::io.shiftleft.proto.cpg.NodePropertyName Name {
              get { return name_; }
              set {
                name_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private global::io.shiftleft.proto.cpg.PropertyValue value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::io.shiftleft.proto.cpg.PropertyValue Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Property);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Property other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (!object.Equals(Value, other.Value)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) hash ^= Name.GetHashCode();
              if (value_ != null) hash ^= Value.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Name);
              }
              if (value_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
              }
              if (value_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Property other) {
              if (other == null) {
                return;
              }
              if (other.Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) {
                Name = other.Name;
              }
              if (other.value_ != null) {
                if (value_ == null) {
                  Value = new global::io.shiftleft.proto.cpg.PropertyValue();
                }
                Value.MergeFrom(other.Value);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Name = (global::io.shiftleft.proto.cpg.NodePropertyName) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    if (value_ == null) {
                      Value = new global::io.shiftleft.proto.cpg.PropertyValue();
                    }
                    input.ReadMessage(Value);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class Edge : pb::IMessage<Edge> {
        private static readonly pb::MessageParser<Edge> _parser = new pb::MessageParser<Edge>(() => new Edge());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Edge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.CpgStruct.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Edge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Edge(Edge other) : this() {
          src_ = other.src_;
          dst_ = other.dst_;
          type_ = other.type_;
          property_ = other.property_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Edge Clone() {
          return new Edge(this);
        }

        /// <summary>Field number for the "src" field.</summary>
        public const int SrcFieldNumber = 1;
        private long src_;
        /// <summary>
        /// Source node.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Src {
          get { return src_; }
          set {
            src_ = value;
          }
        }

        /// <summary>Field number for the "dst" field.</summary>
        public const int DstFieldNumber = 2;
        private long dst_;
        /// <summary>
        /// Destination node.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Dst {
          get { return dst_; }
          set {
            dst_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 3;
        private global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType type_ = global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "property" field.</summary>
        public const int PropertyFieldNumber = 4;
        private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property> _repeated_property_codec
            = pb::FieldCodec.ForMessage(34, global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property.Parser);
        private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property> property_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property> Property {
          get { return property_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Edge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Edge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Src != other.Src) return false;
          if (Dst != other.Dst) return false;
          if (Type != other.Type) return false;
          if(!property_.Equals(other.property_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Src != 0L) hash ^= Src.GetHashCode();
          if (Dst != 0L) hash ^= Dst.GetHashCode();
          if (Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) hash ^= Type.GetHashCode();
          hash ^= property_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Src != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Src);
          }
          if (Dst != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Dst);
          }
          if (Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) Type);
          }
          property_.WriteTo(output, _repeated_property_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Src != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Src);
          }
          if (Dst != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Dst);
          }
          if (Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          size += property_.CalculateSize(_repeated_property_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Edge other) {
          if (other == null) {
            return;
          }
          if (other.Src != 0L) {
            Src = other.Src;
          }
          if (other.Dst != 0L) {
            Dst = other.Dst;
          }
          if (other.Type != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            Type = other.Type;
          }
          property_.Add(other.property_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Src = input.ReadInt64();
                break;
              }
              case 16: {
                Dst = input.ReadInt64();
                break;
              }
              case 24: {
                Type = (global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType) input.ReadEnum();
                break;
              }
              case 34: {
                property_.AddEntriesFrom(input, _repeated_property_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Edge message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// Edge type.
          /// </summary>
          public enum EdgeType {
            [pbr::OriginalName("UNKNOWN_EDGE_TYPE")] UnknownEdgeType = 0,
            /// <summary>
            /// This edge connects a parent node to its child in the syntax tree. 
            /// </summary>
            [pbr::OriginalName("AST")] Ast = 3,
            /// <summary>
            /// This edge connects call sites, i.e., nodes with the type `CALL`, to the
            ///method node that represent the method they invoke. The frontend MAY create
            ///`CALL` edges but is not required to do so. Instead, of the `METHOD_FULL_NAME`
            ///field of the `CALL` node is set correctly, `CALL` edges are created
            ///automatically as the CPG is first loaded. 
            /// </summary>
            [pbr::OriginalName("CALL")] Call = 6,
            /// <summary>
            /// This edge indicates that the source node is an identifier that denotes
            ///access to the destination node. For example, an identifier may reference
            ///a local variable. 
            /// </summary>
            [pbr::OriginalName("REF")] Ref = 10,
            /// <summary>
            /// Edges from nodes to the tags they are tagged by. 
            /// </summary>
            [pbr::OriginalName("TAGGED_BY")] TaggedBy = 11,
            /// <summary>
            /// This edge connects a method input parameter to the corresponding
            ///method output parameter. 
            /// </summary>
            [pbr::OriginalName("PARAMETER_LINK")] ParameterLink = 12,
            /// <summary>
            /// This edge indicates control flow from the source to the destination node. 
            /// </summary>
            [pbr::OriginalName("CFG")] Cfg = 19,
            /// <summary>
            /// This edge connects a node to its evaluation type. 
            /// </summary>
            [pbr::OriginalName("EVAL_TYPE")] EvalType = 21,
            /// <summary>
            /// This edge connects type arguments to type parameters to indicate
            ///that the type argument is used to instantiate the type parameter. 
            /// </summary>
            [pbr::OriginalName("BINDS_TO")] BindsTo = 22,
            /// <summary>
            /// Inheritance relation between a type declaration and a type. This edge MUST NOT
            ///be created by the language frontend as it is automatically created from
            ///`INHERITS_FROM_TYPE_FULL_NAME` fields then the CPG is first loaded. 
            /// </summary>
            [pbr::OriginalName("INHERITS_FROM")] InheritsFrom = 23,
            /// <summary>
            /// This edge connects a node to the method that contains it. 
            /// </summary>
            [pbr::OriginalName("CONTAINS")] Contains = 28,
            /// <summary>
            /// Represents the capturing of a variable into a closure 
            /// </summary>
            [pbr::OriginalName("CAPTURE")] Capture = 40,
            /// <summary>
            /// Connection between a captured LOCAL and the corresponding CLOSURE_BINDING 
            /// </summary>
            [pbr::OriginalName("CAPTURED_BY")] CapturedBy = 41,
            /// <summary>
            /// Similar to `ARGUMENT` edges, `RECEIVER` edges connect call sites
            ///to their receiver arguments. A receiver argument is the object on
            ///which a method operates, that is, it is the expression that is
            ///assigned to the `this` pointer as control is transferred to the method. 
            /// </summary>
            [pbr::OriginalName("RECEIVER")] Receiver = 55,
            /// <summary>
            /// The edge connects control structure nodes to the expressions that holds their conditions. 
            /// </summary>
            [pbr::OriginalName("CONDITION")] Condition = 56,
            /// <summary>
            /// A reaching definition edge indicates that a variable produced at the source node reaches
            ///the destination node without being reassigned on the way. The `VARIABLE` property indicates
            ///which variable is propagated. 
            /// </summary>
            [pbr::OriginalName("REACHING_DEF")] ReachingDef = 137,
            /// <summary>
            /// This edge represents an alias relation between a type declaration and a type.
            ///The language frontend MUST NOT create `ALIAS_OF` edges as they are created
            ///automatically based on `ALIAS_TYPE_FULL_NAME` fields when the CPG is first loaded. 
            /// </summary>
            [pbr::OriginalName("ALIAS_OF")] AliasOf = 138,
            /// <summary>
            /// This edge connects a type declaration (`TYPE_DECL`) with a binding node (`BINDING`) and
            ///indicates that the type declaration has the binding represented by the binding node, in
            ///other words, there is a (name, signature) pair that can be resolved for the type
            ///declaration as stored in the binding node. 
            /// </summary>
            [pbr::OriginalName("BINDS")] Binds = 155,
            /// <summary>
            /// Argument edges connect call sites (node type `CALL`) to their arguments
            ///(node type `EXPRESSION`) as well as `RETURN` nodes to the expressions
            ///that return. 
            /// </summary>
            [pbr::OriginalName("ARGUMENT")] Argument = 156,
            /// <summary>
            /// This edge connects a node to the node that represents its source file. These
            ///edges MUST not be created by the language frontend but are automatically
            ///created based on `FILENAME` fields. 
            /// </summary>
            [pbr::OriginalName("SOURCE_FILE")] SourceFile = 157,
            /// <summary>
            /// This edge indicates that the source node immediately dominates the destination node. 
            /// </summary>
            [pbr::OriginalName("DOMINATE")] Dominate = 181,
            /// <summary>
            /// This edge indicates that the source node immediately post dominates the destination node. 
            /// </summary>
            [pbr::OriginalName("POST_DOMINATE")] PostDominate = 182,
            /// <summary>
            /// A CDG edge expresses that the destination node is control dependent on the source node. 
            /// </summary>
            [pbr::OriginalName("CDG")] Cdg = 183,
            /// <summary>
            /// Used for calculating points-to sets for resolving object aliasing. 
            /// </summary>
            [pbr::OriginalName("POINTS_TO")] PointsTo = 12345,
            /// <summary>
            /// Edge from imports to dependencies 
            /// </summary>
            [pbr::OriginalName("IMPORTS")] Imports = 23663,
            /// <summary>
            /// Edge from CALL statement in the AST to the IMPORT.
            ///￼        |We use this edge to traverse from the logical representation of the IMPORT
            ///￼        |to the corresponding import statement in the AST.
            ///￼        | 
            /// </summary>
            [pbr::OriginalName("IS_CALL_FOR_IMPORT")] IsCallForImport = 23664,
          }

          /// <summary>
          /// Edge properties.
          /// </summary>
          public sealed partial class Property : pb::IMessage<Property> {
            private static readonly pb::MessageParser<Property> _parser = new pb::MessageParser<Property>(() => new Property());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Property> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Property() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Property(Property other) : this() {
              name_ = other.name_;
              value_ = other.value_ != null ? other.value_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Property Clone() {
              return new Property(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private global::io.shiftleft.proto.cpg.EdgePropertyName name_ = global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::io.shiftleft.proto.cpg.EdgePropertyName Name {
              get { return name_; }
              set {
                name_ = value;
              }
            }

            /// <summary>Field number for the "value" field.</summary>
            public const int ValueFieldNumber = 2;
            private global::io.shiftleft.proto.cpg.PropertyValue value_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::io.shiftleft.proto.cpg.PropertyValue Value {
              get { return value_; }
              set {
                value_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Property);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Property other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (!object.Equals(Value, other.Value)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) hash ^= Name.GetHashCode();
              if (value_ != null) hash ^= Value.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (Name != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Name);
              }
              if (value_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(Value);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
              }
              if (value_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Property other) {
              if (other == null) {
                return;
              }
              if (other.Name != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) {
                Name = other.Name;
              }
              if (other.value_ != null) {
                if (value_ == null) {
                  Value = new global::io.shiftleft.proto.cpg.PropertyValue();
                }
                Value.MergeFrom(other.Value);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Name = (global::io.shiftleft.proto.cpg.EdgePropertyName) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    if (value_ == null) {
                      Value = new global::io.shiftleft.proto.cpg.PropertyValue();
                    }
                    input.ReadMessage(Value);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class AdditionalNodeProperty : pb::IMessage<AdditionalNodeProperty> {
    private static readonly pb::MessageParser<AdditionalNodeProperty> _parser = new pb::MessageParser<AdditionalNodeProperty>(() => new AdditionalNodeProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdditionalNodeProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalNodeProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalNodeProperty(AdditionalNodeProperty other) : this() {
      nodeId_ = other.nodeId_;
      property_ = other.property_ != null ? other.property_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalNodeProperty Clone() {
      return new AdditionalNodeProperty(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private long nodeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 2;
    private global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdditionalNodeProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdditionalNodeProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (!object.Equals(Property, other.Property)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId != 0L) hash ^= NodeId.GetHashCode();
      if (property_ != null) hash ^= Property.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(NodeId);
      }
      if (property_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Property);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodeId);
      }
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdditionalNodeProperty other) {
      if (other == null) {
        return;
      }
      if (other.NodeId != 0L) {
        NodeId = other.NodeId;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          Property = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property();
        }
        Property.MergeFrom(other.Property);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NodeId = input.ReadInt64();
            break;
          }
          case 18: {
            if (property_ == null) {
              Property = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Types.Property();
            }
            input.ReadMessage(Property);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdditionalEdgeProperty : pb::IMessage<AdditionalEdgeProperty> {
    private static readonly pb::MessageParser<AdditionalEdgeProperty> _parser = new pb::MessageParser<AdditionalEdgeProperty>(() => new AdditionalEdgeProperty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdditionalEdgeProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalEdgeProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalEdgeProperty(AdditionalEdgeProperty other) : this() {
      edgeId_ = other.edgeId_;
      property_ = other.property_ != null ? other.property_.Clone() : null;
      outNodeKey_ = other.outNodeKey_;
      inNodeKey_ = other.inNodeKey_;
      edgeType_ = other.edgeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdditionalEdgeProperty Clone() {
      return new AdditionalEdgeProperty(this);
    }

    /// <summary>Field number for the "edge_id" field.</summary>
    public const int EdgeIdFieldNumber = 1;
    private long edgeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EdgeId {
      get { return edgeId_; }
      set {
        edgeId_ = value;
      }
    }

    /// <summary>Field number for the "property" field.</summary>
    public const int PropertyFieldNumber = 2;
    private global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property property_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "out_node_key" field.</summary>
    public const int OutNodeKeyFieldNumber = 3;
    private long outNodeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OutNodeKey {
      get { return outNodeKey_; }
      set {
        outNodeKey_ = value;
      }
    }

    /// <summary>Field number for the "in_node_key" field.</summary>
    public const int InNodeKeyFieldNumber = 4;
    private long inNodeKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InNodeKey {
      get { return inNodeKey_; }
      set {
        inNodeKey_ = value;
      }
    }

    /// <summary>Field number for the "edge_type" field.</summary>
    public const int EdgeTypeFieldNumber = 5;
    private global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType edgeType_ = global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType EdgeType {
      get { return edgeType_; }
      set {
        edgeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdditionalEdgeProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdditionalEdgeProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EdgeId != other.EdgeId) return false;
      if (!object.Equals(Property, other.Property)) return false;
      if (OutNodeKey != other.OutNodeKey) return false;
      if (InNodeKey != other.InNodeKey) return false;
      if (EdgeType != other.EdgeType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EdgeId != 0L) hash ^= EdgeId.GetHashCode();
      if (property_ != null) hash ^= Property.GetHashCode();
      if (OutNodeKey != 0L) hash ^= OutNodeKey.GetHashCode();
      if (InNodeKey != 0L) hash ^= InNodeKey.GetHashCode();
      if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) hash ^= EdgeType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EdgeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EdgeId);
      }
      if (property_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Property);
      }
      if (OutNodeKey != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(OutNodeKey);
      }
      if (InNodeKey != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(InNodeKey);
      }
      if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
        output.WriteRawTag(40);
        output.WriteEnum((int) EdgeType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EdgeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EdgeId);
      }
      if (property_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Property);
      }
      if (OutNodeKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutNodeKey);
      }
      if (InNodeKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InNodeKey);
      }
      if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EdgeType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdditionalEdgeProperty other) {
      if (other == null) {
        return;
      }
      if (other.EdgeId != 0L) {
        EdgeId = other.EdgeId;
      }
      if (other.property_ != null) {
        if (property_ == null) {
          Property = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property();
        }
        Property.MergeFrom(other.Property);
      }
      if (other.OutNodeKey != 0L) {
        OutNodeKey = other.OutNodeKey;
      }
      if (other.InNodeKey != 0L) {
        InNodeKey = other.InNodeKey;
      }
      if (other.EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
        EdgeType = other.EdgeType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EdgeId = input.ReadInt64();
            break;
          }
          case 18: {
            if (property_ == null) {
              Property = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.Property();
            }
            input.ReadMessage(Property);
            break;
          }
          case 24: {
            OutNodeKey = input.ReadInt64();
            break;
          }
          case 32: {
            InNodeKey = input.ReadInt64();
            break;
          }
          case 40: {
            EdgeType = (global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Overlays can be stacked onto each other, therefor their node ids must be globally unique.
  /// </summary>
  public sealed partial class CpgOverlay : pb::IMessage<CpgOverlay> {
    private static readonly pb::MessageParser<CpgOverlay> _parser = new pb::MessageParser<CpgOverlay>(() => new CpgOverlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CpgOverlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpgOverlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpgOverlay(CpgOverlay other) : this() {
      node_ = other.node_.Clone();
      edge_ = other.edge_.Clone();
      nodeProperty_ = other.nodeProperty_.Clone();
      edgeProperty_ = other.edgeProperty_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CpgOverlay Clone() {
      return new CpgOverlay(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node> _repeated_node_codec
        = pb::FieldCodec.ForMessage(10, global::io.shiftleft.proto.cpg.CpgStruct.Types.Node.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node> node_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Node> Node {
      get { return node_; }
    }

    /// <summary>Field number for the "edge" field.</summary>
    public const int EdgeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge> _repeated_edge_codec
        = pb::FieldCodec.ForMessage(18, global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge> edge_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge> Edge {
      get { return edge_; }
    }

    /// <summary>Field number for the "node_property" field.</summary>
    public const int NodePropertyFieldNumber = 3;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.AdditionalNodeProperty> _repeated_nodeProperty_codec
        = pb::FieldCodec.ForMessage(26, global::io.shiftleft.proto.cpg.AdditionalNodeProperty.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.AdditionalNodeProperty> nodeProperty_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.AdditionalNodeProperty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.AdditionalNodeProperty> NodeProperty {
      get { return nodeProperty_; }
    }

    /// <summary>Field number for the "edge_property" field.</summary>
    public const int EdgePropertyFieldNumber = 4;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.AdditionalEdgeProperty> _repeated_edgeProperty_codec
        = pb::FieldCodec.ForMessage(34, global::io.shiftleft.proto.cpg.AdditionalEdgeProperty.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.AdditionalEdgeProperty> edgeProperty_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.AdditionalEdgeProperty>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.AdditionalEdgeProperty> EdgeProperty {
      get { return edgeProperty_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CpgOverlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CpgOverlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!node_.Equals(other.node_)) return false;
      if(!edge_.Equals(other.edge_)) return false;
      if(!nodeProperty_.Equals(other.nodeProperty_)) return false;
      if(!edgeProperty_.Equals(other.edgeProperty_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= node_.GetHashCode();
      hash ^= edge_.GetHashCode();
      hash ^= nodeProperty_.GetHashCode();
      hash ^= edgeProperty_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      node_.WriteTo(output, _repeated_node_codec);
      edge_.WriteTo(output, _repeated_edge_codec);
      nodeProperty_.WriteTo(output, _repeated_nodeProperty_codec);
      edgeProperty_.WriteTo(output, _repeated_edgeProperty_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += node_.CalculateSize(_repeated_node_codec);
      size += edge_.CalculateSize(_repeated_edge_codec);
      size += nodeProperty_.CalculateSize(_repeated_nodeProperty_codec);
      size += edgeProperty_.CalculateSize(_repeated_edgeProperty_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CpgOverlay other) {
      if (other == null) {
        return;
      }
      node_.Add(other.node_);
      edge_.Add(other.edge_);
      nodeProperty_.Add(other.nodeProperty_);
      edgeProperty_.Add(other.edgeProperty_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            node_.AddEntriesFrom(input, _repeated_node_codec);
            break;
          }
          case 18: {
            edge_.AddEntriesFrom(input, _repeated_edge_codec);
            break;
          }
          case 26: {
            nodeProperty_.AddEntriesFrom(input, _repeated_nodeProperty_codec);
            break;
          }
          case 34: {
            edgeProperty_.AddEntriesFrom(input, _repeated_edgeProperty_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DiffGraphs can be created independently of each other and therefor when _adding_ nodes|edges,
  /// each DiffGraph has its own ID space. However, when removing nodes|edges, the nodeIds refer to the
  /// globally unique graph id space.
  /// </summary>
  public sealed partial class DiffGraph : pb::IMessage<DiffGraph> {
    private static readonly pb::MessageParser<DiffGraph> _parser = new pb::MessageParser<DiffGraph>(() => new DiffGraph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DiffGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.shiftleft.proto.cpg.CpgReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiffGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiffGraph(DiffGraph other) : this() {
      entries_ = other.entries_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DiffGraph Clone() {
      return new DiffGraph(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry.Parser);
    private readonly pbc::RepeatedField<global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry> entries_ = new pbc::RepeatedField<global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.shiftleft.proto.cpg.DiffGraph.Types.Entry> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DiffGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DiffGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DiffGraph other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DiffGraph message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class RemoveNode : pb::IMessage<RemoveNode> {
        private static readonly pb::MessageParser<RemoveNode> _parser = new pb::MessageParser<RemoveNode>(() => new RemoveNode());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoveNode> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.DiffGraph.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveNode() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveNode(RemoveNode other) : this() {
          key_ = other.key_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveNode Clone() {
          return new RemoveNode(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private long key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoveNode);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoveNode other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key != 0L) hash ^= Key.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Key);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoveNode other) {
          if (other == null) {
            return;
          }
          if (other.Key != 0L) {
            Key = other.Key;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RemoveNodeProperty : pb::IMessage<RemoveNodeProperty> {
        private static readonly pb::MessageParser<RemoveNodeProperty> _parser = new pb::MessageParser<RemoveNodeProperty>(() => new RemoveNodeProperty());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoveNodeProperty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.DiffGraph.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveNodeProperty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveNodeProperty(RemoveNodeProperty other) : this() {
          key_ = other.key_;
          name_ = other.name_;
          localName_ = other.localName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveNodeProperty Clone() {
          return new RemoveNodeProperty(this);
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 1;
        private long key_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Key {
          get { return key_; }
          set {
            key_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private global::io.shiftleft.proto.cpg.NodePropertyName name_ = global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.NodePropertyName Name {
          get { return name_; }
          set {
            name_ = value;
          }
        }

        /// <summary>Field number for the "local_name" field.</summary>
        public const int LocalNameFieldNumber = 3;
        private string localName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalName {
          get { return localName_; }
          set {
            localName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoveNodeProperty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoveNodeProperty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Key != other.Key) return false;
          if (Name != other.Name) return false;
          if (LocalName != other.LocalName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Key != 0L) hash ^= Key.GetHashCode();
          if (Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) hash ^= Name.GetHashCode();
          if (LocalName.Length != 0) hash ^= LocalName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Key != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(Key);
          }
          if (Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Name);
          }
          if (LocalName.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(LocalName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Key != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
          }
          if (Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Name);
          }
          if (LocalName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoveNodeProperty other) {
          if (other == null) {
            return;
          }
          if (other.Key != 0L) {
            Key = other.Key;
          }
          if (other.Name != global::io.shiftleft.proto.cpg.NodePropertyName.UnknownNodeProperty) {
            Name = other.Name;
          }
          if (other.LocalName.Length != 0) {
            LocalName = other.LocalName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Key = input.ReadInt64();
                break;
              }
              case 16: {
                Name = (global::io.shiftleft.proto.cpg.NodePropertyName) input.ReadEnum();
                break;
              }
              case 26: {
                LocalName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RemoveEdge : pb::IMessage<RemoveEdge> {
        private static readonly pb::MessageParser<RemoveEdge> _parser = new pb::MessageParser<RemoveEdge>(() => new RemoveEdge());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoveEdge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.DiffGraph.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveEdge() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveEdge(RemoveEdge other) : this() {
          outNodeKey_ = other.outNodeKey_;
          inNodeKey_ = other.inNodeKey_;
          edgeType_ = other.edgeType_;
          propertiesHash_ = other.propertiesHash_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveEdge Clone() {
          return new RemoveEdge(this);
        }

        /// <summary>Field number for the "out_node_key" field.</summary>
        public const int OutNodeKeyFieldNumber = 1;
        private long outNodeKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long OutNodeKey {
          get { return outNodeKey_; }
          set {
            outNodeKey_ = value;
          }
        }

        /// <summary>Field number for the "in_node_key" field.</summary>
        public const int InNodeKeyFieldNumber = 2;
        private long inNodeKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InNodeKey {
          get { return inNodeKey_; }
          set {
            inNodeKey_ = value;
          }
        }

        /// <summary>Field number for the "edge_type" field.</summary>
        public const int EdgeTypeFieldNumber = 3;
        private global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType edgeType_ = global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType EdgeType {
          get { return edgeType_; }
          set {
            edgeType_ = value;
          }
        }

        /// <summary>Field number for the "propertiesHash" field.</summary>
        public const int PropertiesHashFieldNumber = 4;
        private pb::ByteString propertiesHash_ = pb::ByteString.Empty;
        /// <summary>
        /// used to identify edges (since our edges don't have ids)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PropertiesHash {
          get { return propertiesHash_; }
          set {
            propertiesHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoveEdge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoveEdge other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OutNodeKey != other.OutNodeKey) return false;
          if (InNodeKey != other.InNodeKey) return false;
          if (EdgeType != other.EdgeType) return false;
          if (PropertiesHash != other.PropertiesHash) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OutNodeKey != 0L) hash ^= OutNodeKey.GetHashCode();
          if (InNodeKey != 0L) hash ^= InNodeKey.GetHashCode();
          if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) hash ^= EdgeType.GetHashCode();
          if (PropertiesHash.Length != 0) hash ^= PropertiesHash.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OutNodeKey != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(OutNodeKey);
          }
          if (InNodeKey != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(InNodeKey);
          }
          if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) EdgeType);
          }
          if (PropertiesHash.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(PropertiesHash);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OutNodeKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutNodeKey);
          }
          if (InNodeKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(InNodeKey);
          }
          if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EdgeType);
          }
          if (PropertiesHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertiesHash);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoveEdge other) {
          if (other == null) {
            return;
          }
          if (other.OutNodeKey != 0L) {
            OutNodeKey = other.OutNodeKey;
          }
          if (other.InNodeKey != 0L) {
            InNodeKey = other.InNodeKey;
          }
          if (other.EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            EdgeType = other.EdgeType;
          }
          if (other.PropertiesHash.Length != 0) {
            PropertiesHash = other.PropertiesHash;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                OutNodeKey = input.ReadInt64();
                break;
              }
              case 16: {
                InNodeKey = input.ReadInt64();
                break;
              }
              case 24: {
                EdgeType = (global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType) input.ReadEnum();
                break;
              }
              case 34: {
                PropertiesHash = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RemoveEdgeProperty : pb::IMessage<RemoveEdgeProperty> {
        private static readonly pb::MessageParser<RemoveEdgeProperty> _parser = new pb::MessageParser<RemoveEdgeProperty>(() => new RemoveEdgeProperty());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RemoveEdgeProperty> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.DiffGraph.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveEdgeProperty() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveEdgeProperty(RemoveEdgeProperty other) : this() {
          outNodeKey_ = other.outNodeKey_;
          inNodeKey_ = other.inNodeKey_;
          edgeType_ = other.edgeType_;
          propertiesHash_ = other.propertiesHash_;
          propertyName_ = other.propertyName_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoveEdgeProperty Clone() {
          return new RemoveEdgeProperty(this);
        }

        /// <summary>Field number for the "out_node_key" field.</summary>
        public const int OutNodeKeyFieldNumber = 1;
        private long outNodeKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long OutNodeKey {
          get { return outNodeKey_; }
          set {
            outNodeKey_ = value;
          }
        }

        /// <summary>Field number for the "in_node_key" field.</summary>
        public const int InNodeKeyFieldNumber = 2;
        private long inNodeKey_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long InNodeKey {
          get { return inNodeKey_; }
          set {
            inNodeKey_ = value;
          }
        }

        /// <summary>Field number for the "edge_type" field.</summary>
        public const int EdgeTypeFieldNumber = 3;
        private global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType edgeType_ = global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType EdgeType {
          get { return edgeType_; }
          set {
            edgeType_ = value;
          }
        }

        /// <summary>Field number for the "propertiesHash" field.</summary>
        public const int PropertiesHashFieldNumber = 4;
        private pb::ByteString propertiesHash_ = pb::ByteString.Empty;
        /// <summary>
        /// used to identify edges (since our edges don't have ids)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PropertiesHash {
          get { return propertiesHash_; }
          set {
            propertiesHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "property_name" field.</summary>
        public const int PropertyNameFieldNumber = 5;
        private global::io.shiftleft.proto.cpg.EdgePropertyName propertyName_ = global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.EdgePropertyName PropertyName {
          get { return propertyName_; }
          set {
            propertyName_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RemoveEdgeProperty);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RemoveEdgeProperty other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (OutNodeKey != other.OutNodeKey) return false;
          if (InNodeKey != other.InNodeKey) return false;
          if (EdgeType != other.EdgeType) return false;
          if (PropertiesHash != other.PropertiesHash) return false;
          if (PropertyName != other.PropertyName) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (OutNodeKey != 0L) hash ^= OutNodeKey.GetHashCode();
          if (InNodeKey != 0L) hash ^= InNodeKey.GetHashCode();
          if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) hash ^= EdgeType.GetHashCode();
          if (PropertiesHash.Length != 0) hash ^= PropertiesHash.GetHashCode();
          if (PropertyName != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) hash ^= PropertyName.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (OutNodeKey != 0L) {
            output.WriteRawTag(8);
            output.WriteInt64(OutNodeKey);
          }
          if (InNodeKey != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(InNodeKey);
          }
          if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            output.WriteRawTag(24);
            output.WriteEnum((int) EdgeType);
          }
          if (PropertiesHash.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(PropertiesHash);
          }
          if (PropertyName != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) {
            output.WriteRawTag(40);
            output.WriteEnum((int) PropertyName);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (OutNodeKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(OutNodeKey);
          }
          if (InNodeKey != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(InNodeKey);
          }
          if (EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EdgeType);
          }
          if (PropertiesHash.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(PropertiesHash);
          }
          if (PropertyName != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PropertyName);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RemoveEdgeProperty other) {
          if (other == null) {
            return;
          }
          if (other.OutNodeKey != 0L) {
            OutNodeKey = other.OutNodeKey;
          }
          if (other.InNodeKey != 0L) {
            InNodeKey = other.InNodeKey;
          }
          if (other.EdgeType != global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType.UnknownEdgeType) {
            EdgeType = other.EdgeType;
          }
          if (other.PropertiesHash.Length != 0) {
            PropertiesHash = other.PropertiesHash;
          }
          if (other.PropertyName != global::io.shiftleft.proto.cpg.EdgePropertyName.UnknownEdgeProperty) {
            PropertyName = other.PropertyName;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                OutNodeKey = input.ReadInt64();
                break;
              }
              case 16: {
                InNodeKey = input.ReadInt64();
                break;
              }
              case 24: {
                EdgeType = (global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge.Types.EdgeType) input.ReadEnum();
                break;
              }
              case 34: {
                PropertiesHash = input.ReadBytes();
                break;
              }
              case 40: {
                PropertyName = (global::io.shiftleft.proto.cpg.EdgePropertyName) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Entry : pb::IMessage<Entry> {
        private static readonly pb::MessageParser<Entry> _parser = new pb::MessageParser<Entry>(() => new Entry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Entry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.shiftleft.proto.cpg.DiffGraph.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry(Entry other) : this() {
          switch (other.ValueCase) {
            case ValueOneofCase.Node:
              Node = other.Node.Clone();
              break;
            case ValueOneofCase.Edge:
              Edge = other.Edge.Clone();
              break;
            case ValueOneofCase.NodeProperty:
              NodeProperty = other.NodeProperty.Clone();
              break;
            case ValueOneofCase.EdgeProperty:
              EdgeProperty = other.EdgeProperty.Clone();
              break;
            case ValueOneofCase.RemoveNode:
              RemoveNode = other.RemoveNode.Clone();
              break;
            case ValueOneofCase.RemoveNodeProperty:
              RemoveNodeProperty = other.RemoveNodeProperty.Clone();
              break;
            case ValueOneofCase.RemoveEdge:
              RemoveEdge = other.RemoveEdge.Clone();
              break;
            case ValueOneofCase.RemoveEdgeProperty:
              RemoveEdgeProperty = other.RemoveEdgeProperty.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Entry Clone() {
          return new Entry(this);
        }

        /// <summary>Field number for the "node" field.</summary>
        public const int NodeFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.CpgStruct.Types.Node Node {
          get { return valueCase_ == ValueOneofCase.Node ? (global::io.shiftleft.proto.cpg.CpgStruct.Types.Node) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Node;
          }
        }

        /// <summary>Field number for the "edge" field.</summary>
        public const int EdgeFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge Edge {
          get { return valueCase_ == ValueOneofCase.Edge ? (global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Edge;
          }
        }

        /// <summary>Field number for the "node_property" field.</summary>
        public const int NodePropertyFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.AdditionalNodeProperty NodeProperty {
          get { return valueCase_ == ValueOneofCase.NodeProperty ? (global::io.shiftleft.proto.cpg.AdditionalNodeProperty) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.NodeProperty;
          }
        }

        /// <summary>Field number for the "edge_property" field.</summary>
        public const int EdgePropertyFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.AdditionalEdgeProperty EdgeProperty {
          get { return valueCase_ == ValueOneofCase.EdgeProperty ? (global::io.shiftleft.proto.cpg.AdditionalEdgeProperty) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.EdgeProperty;
          }
        }

        /// <summary>Field number for the "remove_node" field.</summary>
        public const int RemoveNodeFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode RemoveNode {
          get { return valueCase_ == ValueOneofCase.RemoveNode ? (global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.RemoveNode;
          }
        }

        /// <summary>Field number for the "remove_node_property" field.</summary>
        public const int RemoveNodePropertyFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty RemoveNodeProperty {
          get { return valueCase_ == ValueOneofCase.RemoveNodeProperty ? (global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.RemoveNodeProperty;
          }
        }

        /// <summary>Field number for the "remove_edge" field.</summary>
        public const int RemoveEdgeFieldNumber = 7;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge RemoveEdge {
          get { return valueCase_ == ValueOneofCase.RemoveEdge ? (global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.RemoveEdge;
          }
        }

        /// <summary>Field number for the "remove_edge_property" field.</summary>
        public const int RemoveEdgePropertyFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty RemoveEdgeProperty {
          get { return valueCase_ == ValueOneofCase.RemoveEdgeProperty ? (global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty) value_ : null; }
          set {
            value_ = value;
            valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.RemoveEdgeProperty;
          }
        }

        private object value_;
        /// <summary>Enum of possible cases for the "value" oneof.</summary>
        public enum ValueOneofCase {
          None = 0,
          Node = 1,
          Edge = 2,
          NodeProperty = 3,
          EdgeProperty = 4,
          RemoveNode = 5,
          RemoveNodeProperty = 6,
          RemoveEdge = 7,
          RemoveEdgeProperty = 8,
        }
        private ValueOneofCase valueCase_ = ValueOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ValueOneofCase ValueCase {
          get { return valueCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          valueCase_ = ValueOneofCase.None;
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Entry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Entry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Node, other.Node)) return false;
          if (!object.Equals(Edge, other.Edge)) return false;
          if (!object.Equals(NodeProperty, other.NodeProperty)) return false;
          if (!object.Equals(EdgeProperty, other.EdgeProperty)) return false;
          if (!object.Equals(RemoveNode, other.RemoveNode)) return false;
          if (!object.Equals(RemoveNodeProperty, other.RemoveNodeProperty)) return false;
          if (!object.Equals(RemoveEdge, other.RemoveEdge)) return false;
          if (!object.Equals(RemoveEdgeProperty, other.RemoveEdgeProperty)) return false;
          if (ValueCase != other.ValueCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (valueCase_ == ValueOneofCase.Node) hash ^= Node.GetHashCode();
          if (valueCase_ == ValueOneofCase.Edge) hash ^= Edge.GetHashCode();
          if (valueCase_ == ValueOneofCase.NodeProperty) hash ^= NodeProperty.GetHashCode();
          if (valueCase_ == ValueOneofCase.EdgeProperty) hash ^= EdgeProperty.GetHashCode();
          if (valueCase_ == ValueOneofCase.RemoveNode) hash ^= RemoveNode.GetHashCode();
          if (valueCase_ == ValueOneofCase.RemoveNodeProperty) hash ^= RemoveNodeProperty.GetHashCode();
          if (valueCase_ == ValueOneofCase.RemoveEdge) hash ^= RemoveEdge.GetHashCode();
          if (valueCase_ == ValueOneofCase.RemoveEdgeProperty) hash ^= RemoveEdgeProperty.GetHashCode();
          hash ^= (int) valueCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (valueCase_ == ValueOneofCase.Node) {
            output.WriteRawTag(10);
            output.WriteMessage(Node);
          }
          if (valueCase_ == ValueOneofCase.Edge) {
            output.WriteRawTag(18);
            output.WriteMessage(Edge);
          }
          if (valueCase_ == ValueOneofCase.NodeProperty) {
            output.WriteRawTag(26);
            output.WriteMessage(NodeProperty);
          }
          if (valueCase_ == ValueOneofCase.EdgeProperty) {
            output.WriteRawTag(34);
            output.WriteMessage(EdgeProperty);
          }
          if (valueCase_ == ValueOneofCase.RemoveNode) {
            output.WriteRawTag(42);
            output.WriteMessage(RemoveNode);
          }
          if (valueCase_ == ValueOneofCase.RemoveNodeProperty) {
            output.WriteRawTag(50);
            output.WriteMessage(RemoveNodeProperty);
          }
          if (valueCase_ == ValueOneofCase.RemoveEdge) {
            output.WriteRawTag(58);
            output.WriteMessage(RemoveEdge);
          }
          if (valueCase_ == ValueOneofCase.RemoveEdgeProperty) {
            output.WriteRawTag(66);
            output.WriteMessage(RemoveEdgeProperty);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (valueCase_ == ValueOneofCase.Node) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
          }
          if (valueCase_ == ValueOneofCase.Edge) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Edge);
          }
          if (valueCase_ == ValueOneofCase.NodeProperty) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeProperty);
          }
          if (valueCase_ == ValueOneofCase.EdgeProperty) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EdgeProperty);
          }
          if (valueCase_ == ValueOneofCase.RemoveNode) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveNode);
          }
          if (valueCase_ == ValueOneofCase.RemoveNodeProperty) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveNodeProperty);
          }
          if (valueCase_ == ValueOneofCase.RemoveEdge) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveEdge);
          }
          if (valueCase_ == ValueOneofCase.RemoveEdgeProperty) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveEdgeProperty);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Entry other) {
          if (other == null) {
            return;
          }
          switch (other.ValueCase) {
            case ValueOneofCase.Node:
              if (Node == null) {
                Node = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Node();
              }
              Node.MergeFrom(other.Node);
              break;
            case ValueOneofCase.Edge:
              if (Edge == null) {
                Edge = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge();
              }
              Edge.MergeFrom(other.Edge);
              break;
            case ValueOneofCase.NodeProperty:
              if (NodeProperty == null) {
                NodeProperty = new global::io.shiftleft.proto.cpg.AdditionalNodeProperty();
              }
              NodeProperty.MergeFrom(other.NodeProperty);
              break;
            case ValueOneofCase.EdgeProperty:
              if (EdgeProperty == null) {
                EdgeProperty = new global::io.shiftleft.proto.cpg.AdditionalEdgeProperty();
              }
              EdgeProperty.MergeFrom(other.EdgeProperty);
              break;
            case ValueOneofCase.RemoveNode:
              if (RemoveNode == null) {
                RemoveNode = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode();
              }
              RemoveNode.MergeFrom(other.RemoveNode);
              break;
            case ValueOneofCase.RemoveNodeProperty:
              if (RemoveNodeProperty == null) {
                RemoveNodeProperty = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty();
              }
              RemoveNodeProperty.MergeFrom(other.RemoveNodeProperty);
              break;
            case ValueOneofCase.RemoveEdge:
              if (RemoveEdge == null) {
                RemoveEdge = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge();
              }
              RemoveEdge.MergeFrom(other.RemoveEdge);
              break;
            case ValueOneofCase.RemoveEdgeProperty:
              if (RemoveEdgeProperty == null) {
                RemoveEdgeProperty = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty();
              }
              RemoveEdgeProperty.MergeFrom(other.RemoveEdgeProperty);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::io.shiftleft.proto.cpg.CpgStruct.Types.Node subBuilder = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Node();
                if (valueCase_ == ValueOneofCase.Node) {
                  subBuilder.MergeFrom(Node);
                }
                input.ReadMessage(subBuilder);
                Node = subBuilder;
                break;
              }
              case 18: {
                global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge subBuilder = new global::io.shiftleft.proto.cpg.CpgStruct.Types.Edge();
                if (valueCase_ == ValueOneofCase.Edge) {
                  subBuilder.MergeFrom(Edge);
                }
                input.ReadMessage(subBuilder);
                Edge = subBuilder;
                break;
              }
              case 26: {
                global::io.shiftleft.proto.cpg.AdditionalNodeProperty subBuilder = new global::io.shiftleft.proto.cpg.AdditionalNodeProperty();
                if (valueCase_ == ValueOneofCase.NodeProperty) {
                  subBuilder.MergeFrom(NodeProperty);
                }
                input.ReadMessage(subBuilder);
                NodeProperty = subBuilder;
                break;
              }
              case 34: {
                global::io.shiftleft.proto.cpg.AdditionalEdgeProperty subBuilder = new global::io.shiftleft.proto.cpg.AdditionalEdgeProperty();
                if (valueCase_ == ValueOneofCase.EdgeProperty) {
                  subBuilder.MergeFrom(EdgeProperty);
                }
                input.ReadMessage(subBuilder);
                EdgeProperty = subBuilder;
                break;
              }
              case 42: {
                global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode subBuilder = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNode();
                if (valueCase_ == ValueOneofCase.RemoveNode) {
                  subBuilder.MergeFrom(RemoveNode);
                }
                input.ReadMessage(subBuilder);
                RemoveNode = subBuilder;
                break;
              }
              case 50: {
                global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty subBuilder = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveNodeProperty();
                if (valueCase_ == ValueOneofCase.RemoveNodeProperty) {
                  subBuilder.MergeFrom(RemoveNodeProperty);
                }
                input.ReadMessage(subBuilder);
                RemoveNodeProperty = subBuilder;
                break;
              }
              case 58: {
                global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge subBuilder = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdge();
                if (valueCase_ == ValueOneofCase.RemoveEdge) {
                  subBuilder.MergeFrom(RemoveEdge);
                }
                input.ReadMessage(subBuilder);
                RemoveEdge = subBuilder;
                break;
              }
              case 66: {
                global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty subBuilder = new global::io.shiftleft.proto.cpg.DiffGraph.Types.RemoveEdgeProperty();
                if (valueCase_ == ValueOneofCase.RemoveEdgeProperty) {
                  subBuilder.MergeFrom(RemoveEdgeProperty);
                }
                input.ReadMessage(subBuilder);
                RemoveEdgeProperty = subBuilder;
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
